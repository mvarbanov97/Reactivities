{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","features/activities/dashboard/ActivityFilters.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/options/categoryOptions.ts","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetails.tsx","features/errors/TestError.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileEditForm.tsx","features/profiles/ProfileAbout.tsx","features/profiles/ProfileFollowings.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/common/util/hooks.ts","features/users/RegisterSuccess.tsx","features/users/ConfirmEmail.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","modelStateErrors","key","flat","startsWith","userStore","logout","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","user","register","fbLogin","accessToken","refreshToken","verifyEmail","email","resendEmailConfirm","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","listFollowings","predicate","listActivities","Activity","init","Object","assign","ActivityFormValues","undefined","title","category","description","date","city","venue","Profile","displayName","image","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivities","axiosParams","result","setActivity","setPagination","setLoadingInitial","console","log","loadActivity","getActivity","runInAction","isGoing","attendees","some","isHost","hostUsername","host","find","x","Date","state","createActivity","attendee","newActivity","updateActivity","updatedActivity","deleteActivity","updateAttendance","filter","cancelActivityToggle","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","ProfileStore","loadingProfile","uploading","followings","loadingFollowings","activeTab","userActivities","loadingActivities","setActiveTab","loadProfile","photo","photos","isMain","setImage","activityStore","p","setDisplayName","followingCount","loadFollowings","loadUserActivities","UserStore","fbAccessToken","fbLoading","refreshTokenTimeout","creds","setToken","startRefreshTokenTimer","modalStore","closeModal","window","localStorage","removeItem","getUser","name","getFacebookLoginStatus","FB","getLoginStatus","authResponse","facebookLogin","apiLogin","catch","scope","stopRefreshTokenTimer","jwtToken","atob","split","timeout","exp","now","setTimeout","clearTimeout","getItem","appLoaded","setAppLoaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","on","comment","createdAt","unshift","stopHubConnetion","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","isLoggedIn","Menu","inverted","fixed","Container","Item","as","NavLink","to","exact","header","src","alt","style","marginRight","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","vertical","size","width","marginTop","Header","attached","color","active","has","onChange","Reveal","animated","Content","visible","fluid","hidden","e","preventDefault","handleFollow","Card","Description","str","length","substring","truncate","bio","extra","Icon","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","circular","bordered","Segment","Group","Label","textAlign","stype","marginBottom","basic","secondary","clearing","floated","groupedActivities","group","sub","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","MyTextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","placeholder","type","render","ValidationErrors","Message","err","i","validationSchema","Yup","required","isValid","dirty","Divider","LoadingComponent","Dimmer","MyTextArea","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","categoryOptions","MyDateInput","selected","useHistory","useParams","nullable","enableReinitialize","uuid","handleFormSubmit","autoComplete","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","colo","verticalAlign","relaxed","divided","Extra","TestErrors","widths","baseUrl","primary","NotFound","Inline","message","Modal","onClose","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","isCurrentUser","addPhotoMode","setAddPhotoMode","target","setTarget","Tab","Pane","itemsPerRow","currentTarget","handleSetMainPhoto","handleDeletePhoto","setEditMode","panes","menuItem","pane","menu","onTabChange","activeIndex","handleTabChange","objectFit","Meta","menuPosition","Statistic","PrivateRoute","Component","component","rest","useQuery","useLocation","search","RegisterSuccess","success","ConfirmEmail","Status","setStatus","handleConfirmEmailResend","getBody","location","finally","hideProgressBar","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.d2753b7f.chunk.js","sourcesContent":["export interface Pagination {\r\n    currentPage: number;\r\n    itemsPerPage: number;\r\n    totalItems: number;\r\n    totalPages: number;\r\n}\r\n\r\nexport class PaginatedResult<T> {\r\n    data: T;\r\n    pagination: Pagination;\r\n\r\n    constructor(data: T, pagination: Pagination) {\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\nexport class PagingParams {\r\n    pageNumber;\r\n    pageSize;\r\n\r\n    constructor(pageNumber = 1, pageSize = 2) {\r\n        this.pageNumber = pageNumber;\r\n        this.pageSize = pageSize;\r\n    }\r\n}","import axios, { AxiosError, AxiosResponse } from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { history } from \"../..\";\r\nimport { Activity, ActivityFormValues } from \"../models/activity\";\r\nimport { PaginatedResult } from \"../models/pagination\";\r\nimport { Photo, Profile, UserActivtiy } from \"../models/profile\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { store } from \"../stores/store\";\r\n\r\nconst sleep = (delay: number) => {\r\n  return new Promise((resolve) => {\r\n    setTimeout(resolve, delay);\r\n  });\r\n};\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\naxios.interceptors.request.use(config => {\r\n  const token = store.commonStore.token;\r\n  if(token) config.headers.Authorization = `Bearer ${token}`;\r\n  return config;\r\n})\r\n\r\naxios.interceptors.response.use(async (response) => {\r\n    if (process.env.NODE_ENV === 'development') await sleep(1000);\r\n    const pagination = response.headers[\"pagination\"];\r\n    if(pagination) {\r\n      response.data = new PaginatedResult(response.data, JSON.parse(pagination));\r\n      return response as AxiosResponse<PaginatedResult<any>>;\r\n    }\r\n    return response;\r\n}, (error: AxiosError) => {\r\n  const {data, status, config, headers} = error.response!;\r\n  switch(status) {\r\n    case 400:\r\n      if (typeof data === 'string') {\r\n        toast.error(data);\r\n      }\r\n      if (config.method === 'get' && data.errors.hasOwnProperty('id')) {\r\n        history.push('/not-found');\r\n      }\r\n      if (data.errors) {\r\n        const modelStateErrors = [];\r\n        for (const key in data.errors) {\r\n          if (data.errors[key]) {\r\n            modelStateErrors.push(data.errors[key]);\r\n          }\r\n        }\r\n        throw modelStateErrors.flat();\r\n      }\r\n      break;\r\n    case 401:\r\n      if (status === 401 && headers['www-authenticate']?.startsWith('Bearer error=\"invalid_token\"')) {\r\n        store.userStore.logout();\r\n        toast.error('Session expired - please login to continue using the app');\r\n      }\r\n      break;\r\n    case 404:\r\n      history.push('/not-found');\r\n      break;\r\n    case 500:\r\n      store.commonStore.setServerError(data);\r\n      history.push('/server-error');\r\n      break;\r\n  }\r\n\r\n  return Promise.reject(error);\r\n});\r\n\r\nconst responseBody = <T>(response: AxiosResponse<T>) => response.data;\r\n\r\nconst requests = {\r\n  get: <T>(url: string) => axios.get<T>(url).then(responseBody),\r\n  post: <T>(url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\r\n  put: <T>(url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\r\n  delete: <T>(url: string) => axios.delete<T>(url).then(responseBody),\r\n};\r\n\r\nconst Activities = {\r\n  list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>(\"/activities\", {params}).then(responseBody),\r\n  details: (id:string) => requests.get<Activity>(`/activities/${id}`),\r\n  create:  (activity: ActivityFormValues) => requests.post<void>('/activities', activity),\r\n  update: (activity: ActivityFormValues) => requests.put<void>(`/activities/${activity.id}`, activity),\r\n  delete: (id:string) => requests.delete<void>(`/activities/${id}`),\r\n  attend: (id:string) => requests.post<void>(`/activities/${id}/attend`, {}),\r\n};\r\n\r\nconst Account = {\r\n  current: () => requests.get<User>('/account'),\r\n  login: (user: UserFormValues) => requests.post<User>('/account/login', user),\r\n  register: (user: UserFormValues) => requests.post<User>('/account/register', user),\r\n  fbLogin: (accessToken: string) => requests.post<User>(`/account/fbLogin?accessToken=${accessToken}`, {}),\r\n  refreshToken: () => requests.post<User>(`/account/refreshToken`, {}),\r\n  verifyEmail: (token: string, email:string) => requests.post<void>(`/account/verifyEmail?token=${token}&email=${email}`, {}),\r\n  resendEmailConfirm: (email: string) => requests.get(`/account/resendEmailConformationLink?email=${email}`),\r\n}\r\n\r\nconst Profiles = {\r\n  get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\r\n  uploadPhoto: (file: Blob) => {\r\n    let formData = new FormData();\r\n    formData.append('File', file);\r\n    return axios.post<Photo>('photos', formData, {\r\n      headers: {'Content-type' : 'multipart/form-data'}\r\n    })\r\n  },\r\n  setMainPhoto: (id:string) => requests.post(`/photos/${id}/setMain`, {}),\r\n  deletePhoto: (id:string) => requests.delete(`/photos/${id}`),\r\n  updateProfile: (profile: Partial<Profile>) => requests.put(`/profiles`, profile),\r\n  updateFollowing: (username: string) => requests.post(`/follow/${username}`, {}),\r\n  listFollowings: (username: string, predicate: string) => requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\r\n  listActivities: (username: string, predicate: string) => requests.get<UserActivtiy[]>(`/profiles/${username}/activities?predicate=${predicate}`),\r\n}\r\n\r\nconst agent = {\r\n  Activities,\r\n  Account,\r\n  Profiles,\r\n};\r\n\r\nexport default agent;\r\n","import { Profile } from \"./profile\";\r\n\r\nexport interface Activity {\r\n    id: string;\r\n    title: string;\r\n    date: Date | null;\r\n    description: string;\r\n    category: string;\r\n    city: string;\r\n    venue: string;\r\n    hostUsername: string;\r\n    isCancelled: boolean;\r\n    isGoing: boolean;\r\n    isHost: boolean;\r\n    host?: Profile;\r\n    attendees: Profile[]\r\n}\r\n\r\nexport class Activity implements Activity {\r\n    constructor(init?: ActivityFormValues){\r\n        Object.assign(this, init);\r\n    }\r\n}\r\n\r\nexport class ActivityFormValues {\r\n    id?: string = undefined;\r\n    title: string = '';\r\n    category: string = '';\r\n    description: string = '';\r\n    date: Date | null = null;\r\n    city: string = '';\r\n    venue: string = '';\r\n\r\n    constructor(activity?: ActivityFormValues) {\r\n        if (activity)\r\n        {\r\n            this.id = activity?.id;\r\n            this.title = activity?.title;\r\n            this.category = activity.category;\r\n            this.description = activity.description;\r\n            this.date = activity.date;\r\n            this.city = activity.city;\r\n            this.venue = activity.venue;\r\n            this.city = activity.city;\r\n        }\r\n        \r\n    }\r\n}","import { User } from \"./user\";\r\n\r\nexport interface Profile {\r\n    username: string;\r\n    displayName: string;\r\n    image?: string;\r\n    followersCount: number;\r\n    followingCount: number;\r\n    following: boolean;\r\n    bio?: string;\r\n    photos?: Photo[];\r\n}\r\n\r\nexport interface UserActivtiy {\r\n    id: string;\r\n    title: string;\r\n    category: string;\r\n    date: Date;\r\n}\r\n\r\nexport class Profile implements Profile {\r\n    constructor(user: User) {\r\n        this.username = user.username;\r\n        this.displayName = user.displayName;\r\n        this.image = user.image;\r\n    }\r\n}\r\n\r\nexport interface Photo {\r\n    id: string;\r\n    url: string;\r\n    isMain: boolean;\r\n}","import { format } from 'date-fns';\r\nimport { makeAutoObservable, reaction, runInAction } from 'mobx';\r\nimport agent from '../api/agent';\r\nimport { Activity, ActivityFormValues } from '../models/activity';\r\nimport { Pagination, PagingParams } from '../models/pagination';\r\nimport { Profile } from '../models/profile';\r\nimport { store } from './store';\r\n\r\nexport default class ActivityStore {\r\n   activityRegistry = new Map<string, Activity>();\r\n   selectedActivity: Activity | undefined = undefined;\r\n   editMode = false;\r\n   loading = false;\r\n   loadingInitial = false;\r\n   pagination: Pagination | null = null;\r\n   pagingParams = new PagingParams();\r\n   predicate = new Map().set('all', true);\r\n\r\n   constructor() {\r\n      makeAutoObservable(this);\r\n\r\n      reaction(\r\n         () => this.predicate.keys(),\r\n         () => {\r\n            this.pagingParams = new PagingParams();\r\n            this.activityRegistry.clear();\r\n            this.loadActivities();\r\n         }\r\n      )\r\n   }\r\n\r\n   setPagingParams = (pagingParams: PagingParams) => {\r\n      this.pagingParams = pagingParams;\r\n   }\r\n\r\n   setPredicate = (predicate: string, value: string | Date) => {\r\n      const resetPredicate = () => {\r\n         this.predicate.forEach((value, key) => {\r\n            if (key !== 'startDate') this.predicate.delete(key);\r\n         })\r\n      }\r\n      switch (predicate) {\r\n         case 'all':\r\n            resetPredicate();\r\n            this.predicate.set('all', true);\r\n            break;\r\n         case 'isGoing':\r\n            resetPredicate();\r\n            this.predicate.set('isGoing', true);\r\n            break;\r\n         case 'isHost':\r\n            resetPredicate();\r\n            this.predicate.set('isHost', true);\r\n            break;\r\n         case 'startDate':\r\n            this.predicate.delete('startDate');\r\n            this.predicate.set('startDate', value);\r\n            break;\r\n      }\r\n   } \r\n\r\n   get axiosParams() {\r\n      const params = new URLSearchParams();\r\n      params.append('pageNumber', this.pagingParams.pageNumber.toString());\r\n      params.append('pageSize', this.pagingParams.pageSize.toString());\r\n      this.predicate.forEach((value, key) => {\r\n         if (key === 'startDate') {\r\n            params.append(key, (value as Date).toISOString());\r\n         } else {\r\n            params.append(key, value);\r\n         }\r\n      })\r\n      return params;\r\n   }\r\n\r\n   get activitiesByDate() {\r\n      return Array.from(this.activityRegistry.values()).sort((a, b) => a.date!.getTime() - b.date!.getTime());\r\n   }\r\n\r\n   get groupedActivities() {\r\n      return Object.entries(\r\n         this.activitiesByDate.reduce((activities, activity) => {\r\n            const date = format(activity.date!, 'dd MMM yyyy');\r\n            activities[date] = activities[date] ? [...activities[date], activity] : [activity];\r\n            return activities;\r\n         }, {} as {[key:string]: Activity[]})\r\n      )\r\n   }\r\n\r\n   loadActivities = async () => {\r\n      this.loadingInitial = true;\r\n      try {\r\n         const result = await agent.Activities.list(this.axiosParams);\r\n         result.data.forEach(activity => {\r\n            this.setActivity(activity);\r\n         });\r\n         this.setPagination(result.pagination);\r\n         this.setLoadingInitial(false);\r\n      } catch (error) {\r\n         console.log(error);\r\n         this.setLoadingInitial(false);\r\n      }\r\n   };\r\n\r\n   setPagination = (pagination: Pagination) => {\r\n      this.pagination = pagination;\r\n   }\r\n\r\n   loadActivity = async (id: string) => {\r\n      let activity = this.getActivity(id);\r\n      if (activity) {\r\n         this.selectedActivity = activity;\r\n         return activity;\r\n      } else {\r\n         this.loadingInitial = true;\r\n         try {\r\n            activity = await agent.Activities.details(id);\r\n            this.setActivity(activity);\r\n            runInAction(() => {\r\n               this.selectedActivity = activity;\r\n            });\r\n            this.setLoadingInitial(false);\r\n            return activity;\r\n         } catch (error) {\r\n            console.log(error);\r\n            this.setLoadingInitial(false);\r\n         }\r\n      }\r\n   };\r\n\r\n   private setActivity = (activity: Activity) => {\r\n      const user = store.userStore.user;\r\n      if(user) {\r\n         activity.isGoing = activity.attendees!.some(a => a.username === user.username);\r\n         activity.isHost = activity.hostUsername === user.username;\r\n         activity.host = activity.attendees?.find(x => x.username === activity.hostUsername);\r\n      }\r\n      activity.date = new Date(activity.date!)\r\n      this.activityRegistry.set(activity.id, activity);\r\n   };\r\n\r\n   private getActivity = (id: string) => {\r\n      return this.activityRegistry.get(id);\r\n   };\r\n\r\n   setLoadingInitial = (state: boolean) => {\r\n      this.loadingInitial = state;\r\n   };\r\n\r\n   createActivity = async (activity: ActivityFormValues) => {\r\n      const user = store.userStore.user;\r\n      const attendee = new Profile(user!);\r\n      try {\r\n         await agent.Activities.create(activity);\r\n         const newActivity = new Activity(activity);\r\n         newActivity.hostUsername = user!.username;\r\n         newActivity.attendees = [attendee];\r\n         this.setActivity(newActivity);\r\n         runInAction(() => {\r\n            this.selectedActivity = newActivity;\r\n         });\r\n      } catch (error) {\r\n         console.log(error);\r\n      }\r\n   };\r\n\r\n   updateActivity = async (activity: ActivityFormValues) => {\r\n      try {\r\n         await agent.Activities.update(activity);\r\n         runInAction(() => {\r\n            if(activity.id){\r\n               let updatedActivity = {...this.getActivity(activity.id), ...activity};\r\n               this.activityRegistry.set(activity.id, updatedActivity as Activity);\r\n               this.selectedActivity = updatedActivity as Activity;\r\n            }\r\n         });\r\n      } catch (error) {\r\n         console.log(error);\r\n      }\r\n   };\r\n\r\n   deleteActivity = async (id: string) => {\r\n      this.loading = true;\r\n\r\n      try {\r\n         await agent.Activities.delete(id);\r\n         runInAction(() => {\r\n            this.activityRegistry.delete(id);\r\n            this.loading = false;\r\n         });\r\n      } catch (error) {\r\n         console.log(error);\r\n         runInAction(() => {\r\n            this.loading = false;\r\n         });\r\n      }\r\n   };\r\n\r\n   updateAttendance = async () => {\r\n      const user = store.userStore.user;\r\n      this.loading = true;\r\n\r\n      try {\r\n         await agent.Activities.attend(this.selectedActivity!.id);\r\n         runInAction(() => {\r\n            if (this.selectedActivity?.isGoing) {\r\n               this.selectedActivity.attendees = this.selectedActivity.attendees?.filter(a => a.username !== user?.username);\r\n               this.selectedActivity.isGoing = false;\r\n            } else {\r\n               const attendee = new Profile(user!);\r\n               this.selectedActivity?.attendees?.push(attendee);\r\n               this.selectedActivity!.isGoing = true;\r\n            }\r\n\r\n            this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n         })\r\n      } catch (error) {\r\n         console.log(error);\r\n      } finally {\r\n         runInAction(() => this.loading = false);\r\n      }\r\n   }\r\n\r\n   cancelActivityToggle = async () => {\r\n      this.loading = true;\r\n      try {\r\n         await agent.Activities.attend(this.selectedActivity!.id);\r\n         runInAction(() => {\r\n            this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\r\n            this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!)\r\n         })\r\n      } catch(error) {\r\n         console.log(error);\r\n      } finally {\r\n         runInAction(() => this.loading = false);\r\n      }\r\n   }\r\n\r\n   clearSelectedActivity = () => {\r\n      this.selectedActivity = undefined;\r\n   }\r\n\r\n   updateAttendeeFollowing = (username:string) => {\r\n      this.activityRegistry.forEach(activity => {\r\n         activity.attendees.forEach(attendee => {\r\n            if (attendee.username === username) {\r\n               attendee.following ? attendee.followersCount-- : attendee.followersCount++;\r\n               attendee.following = !attendee.following;\r\n            }\r\n         })\r\n      })\r\n   }\r\n}\r\n","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\nimport agent from \"../api/agent\";\nimport { Photo, Profile, UserActivtiy } from \"../models/profile\";\nimport { store } from \"./store\";\n\nexport default class ProfileStore{\n    profile: Profile | null = null;\n    loadingProfile: boolean = false;\n    uploading: boolean = false;\n    loading: boolean = false;\n    followings: Profile[] = [];\n    loadingFollowings: boolean = false;\n    activeTab: number =  0;\n    userActivities: UserActivtiy[] = [];\n    loadingActivities = false;\n\n    constructor() {\n        makeAutoObservable(this);\n\n        reaction(\n            () => this.activeTab,\n            activeTab => {\n                if (this.activeTab === 3 || this.activeTab === 4) {\n                    const predicate = this.activeTab === 3 ? 'followers' : 'following';\n                    this.loadFollowings(predicate);\n                } else {\n                    this.followings = [];\n                }\n            }\n        )\n    }\n\n    setActiveTab = (activeTab: any) => {\n        this.activeTab = activeTab;\n    }\n\n    get isCurrentUser() {\n        if (store.userStore.user && this.profile) {\n            return store.userStore.user.username === this.profile.username;\n        }\n\n        return false;\n    }\n\n    loadProfile = async (username:string) => {\n        this.loadingProfile = true;\n\n        try {\n            const profile = await agent.Profiles.get(username);\n            runInAction(() => {\n                this.profile = profile;\n                this.loadingProfile = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loadingProfile = false);\n        }\n    }\n\n    uploadPhoto = async (file: Blob) => {\n        this.uploading = true;\n        try {\n            const response = await agent.Profiles.uploadPhoto(file);\n            const photo = response.data;\n            runInAction(() => {\n                if (this.profile) {\n                    this.profile.photos?.push(photo);\n                    if (photo.isMain && store.userStore.user) {\n                        store.userStore.setImage(photo.url);\n                        this.profile.image = photo.url;\n                    }\n                }\n                this.uploading = false;\n            })\n        } catch(error) {\n            console.log(error);\n            runInAction(() => this.uploading = false)\n        }\n    }\n\n    setMainPhoto = async (photo: Photo) => {\n        this.loading = true;\n        try {\n            await agent.Profiles.setMainPhoto(photo.id);\n            store.userStore.setImage(photo.url);\n            store.activityStore.loadActivities();\n            runInAction(() => {\n                if (this.profile && this.profile.photos) {\n                    this.profile.photos.find(p => p.isMain)!.isMain = false;\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\n                    this.profile.image = photo.url;\n                    this.loading = false;\n                }\n            })\n\n        } catch (error) {\n            runInAction(() => this.loading = false);\n            console.log(error);\n        }\n    }\n\n    deletePhoto = async (photo: Photo) => {\n        this.loading = true;\n        try {\n            await agent.Profiles.deletePhoto(photo.id);\n            runInAction(() => {\n                if(this.profile) {\n                    this.profile.photos = this.profile?.photos?.filter(x => x.id !== photo.id)};\n                    this.loading = false;\n                }\n            )\n        } catch (error) {\n            runInAction(() => this.loading = false);\n            console.log(error);\n        }\n    }\n\n    updateProfile = async (profile: Partial<Profile>) => {\n        this.loading = true;\n        try {\n            await agent.Profiles.updateProfile(profile);\n            runInAction(() => {\n                if (profile.displayName && profile.displayName !== store.userStore.user?.displayName) {\n                    store.userStore.setDisplayName(profile.displayName);\n                }\n                this.profile = {...this.profile, ...profile as Profile};\n                this.loading = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loading = false);\n        }\n    }\n\n    updateFollowing = async (username:string, following:boolean) => {\n        this.loading = true;\n        try {\n            await agent.Profiles.updateFollowing(username);\n            store.activityStore.updateAttendeeFollowing(username);\n            runInAction(() => {\n                if (this.profile && this.profile.username !== store.userStore.user?.username && this.profile.username === username) {\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\n                    this.profile.following = !this.profile.following;\n                }\n                if (this.profile && this.profile.username === store.userStore.user?.username) {\n                    following ? this.profile.followingCount++ : this.profile.followingCount--;\n                }\n                this.followings.forEach(profile => {\n                    if (profile.username === username) {\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\n                        profile.following = !profile.following;\n                    }\n                })\n\n                this.loading = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loading = false);\n        }\n    }\n\n    loadFollowings = async (predicate:string) => {\n        this.loadingFollowings = true;\n        try {\n            const followings = await agent.Profiles.listFollowings(this.profile!.username, predicate);\n            runInAction(() => {\n                this.followings = followings;\n                this.loadingFollowings = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loadingFollowings = false);\n        }\n    }\n\n    loadUserActivities = async (username:string, predicate?: string) => {\n        this.loadingActivities = true;\n        try {\n            const activities = await agent.Profiles.listActivities(username, predicate!);\n            runInAction(() => {\n                this.userActivities = activities;\n                this.loadingActivities = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loadingActivities = false)\n        }\n    }\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { history } from \"../..\";\r\nimport agent from \"../api/agent\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class UserStore {\r\n    user: User | null = null;\r\n    fbAccessToken: string | null = null;\r\n    fbLoading: boolean = false;\r\n    refreshTokenTimeout: any;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    get isLoggedIn() {\r\n        return !!this.user;\r\n    }\r\n\r\n    login = async(creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.login(creds);\r\n            store.commonStore.setToken(user.token);\r\n            this.startRefreshTokenTimer(user);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    logout = () => {\r\n        store.commonStore.setToken(null);\r\n        window.localStorage.removeItem('jwt');\r\n        this.user = null;\r\n        history.push('/');\r\n    }\r\n\r\n    getUser = async () => {\r\n        try {\r\n            const user = await agent.Account.current();\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            this.startRefreshTokenTimer(user);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    register = async (creds: UserFormValues) => {\r\n        try {\r\n            await agent.Account.register(creds);\r\n            history.push(`/account/registerSuccess?email=${creds.email}`);\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    setImage = (image:string) => {\r\n        if (this.user) this.user.image = image;\r\n    }\r\n\r\n    setDisplayName = (name: string) => {\r\n        if (this.user) this.user.displayName = name;\r\n    }\r\n\r\n    getFacebookLoginStatus = async () => {\r\n        window.FB.getLoginStatus(response => {\r\n            if (response.status === 'connected') {\r\n                this.fbAccessToken = response.authResponse.accessToken;\r\n            }\r\n        })\r\n    }\r\n\r\n    facebookLogin = () => {\r\n        this.fbLoading = true;\r\n        const apiLogin = (accessToken: string) => {\r\n            agent.Account.fbLogin(accessToken).then(user => {\r\n                store.commonStore.setToken(user.token);\r\n                this.startRefreshTokenTimer(user);\r\n                runInAction(() => {\r\n                    this.user = user;\r\n                    this.fbLoading = false;\r\n                })\r\n                history.push('/activities');\r\n            }).catch(error => {\r\n                console.log(error);\r\n                runInAction(() => this.fbLoading = false);\r\n            })\r\n        }\r\n        if (this.fbAccessToken) {\r\n            apiLogin(this.fbAccessToken);\r\n        } else {\r\n            window.FB.login(response => {\r\n                apiLogin(response.authResponse.accessToken);\r\n            }, {scope: 'public_profile,email'})\r\n        }\r\n    }\r\n\r\n    refreshToken = async () => {\r\n        this.stopRefreshTokenTimer();\r\n        try {\r\n            const user = await agent.Account.refreshToken();\r\n            runInAction(() => this.user = user);\r\n            store.commonStore.setToken(user.token);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    private startRefreshTokenTimer(user: User) {\r\n        const jwtToken = JSON.parse(atob(user.token.split('.')[1]));\r\n        const expires = new Date(jwtToken.exp * 1000);\r\n        // Set our timeout value to 1 minute before our token expires\r\n        const timeout = expires.getTime() - Date.now() - (60 * 1000);\r\n        this.refreshTokenTimeout = setTimeout(this.refreshToken, timeout);\r\n    }\r\n\r\n    private stopRefreshTokenTimer() {\r\n        clearTimeout(this.refreshTokenTimeout);\r\n    }\r\n}","import { createContext, useContext } from 'react';\r\nimport ActivityStore from './activityStore';\r\nimport CommentStore from './commentStore';\r\nimport CommonStore from './commonStore';\r\nimport ModalStore from './modalStore';\r\nimport ProfileStore from './profileStore';\r\nimport UserStore from './userStore';\r\n\r\ninterface Store {\r\n   activityStore: ActivityStore;\r\n   commonStore: CommonStore;\r\n   userStore: UserStore;\r\n   modalStore: ModalStore;\r\n   profileStore: ProfileStore;\r\n   commentStore: CommentStore;\r\n}\r\n\r\nexport const store: Store = {\r\n   activityStore: new ActivityStore(),\r\n   commonStore: new CommonStore(),\r\n   userStore: new UserStore(),\r\n   modalStore: new ModalStore(),\r\n   profileStore: new ProfileStore(),\r\n   commentStore: new CommentStore(),\r\n};\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport function useStore() {\r\n   return useContext(StoreContext);\r\n}\r\n","import { makeAutoObservable, reaction } from \"mobx\";\r\nimport { ServerError } from \"../models/serverError\";\r\n\r\nexport default class CommonStore {\r\n    error: ServerError | null = null;\r\n    token: string | null = window.localStorage.getItem('jwt');\r\n    appLoaded = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.token,\r\n            token => {\r\n                if(token){\r\n                    window.localStorage.setItem('jwt', token);\r\n                } else {\r\n                    window.localStorage.removeItem('jwt');\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setServerError = (error: ServerError) => {\r\n        this.error = error;\r\n    }\r\n\r\n    setToken = (token: string | null) => {\r\n        this.token = token;\r\n    }\r\n\r\n    setAppLoaded = () => {\r\n        this.appLoaded = true;\r\n    }\r\n}","import { makeAutoObservable } from \"mobx\"\r\n\r\ninterface Modal {\r\n    open: boolean;\r\n    body: JSX.Element | null;\r\n}\r\n\r\nexport default class ModalStore {\r\n    modal: Modal = {\r\n        open: false,\r\n        body: null\r\n    }\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    openModal = (content: JSX.Element) => {\r\n        this.modal.open = true;\r\n        this.modal.body = content;\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { ChatComment } from \"../models/comment\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class CommentStore {\r\n    comments: ChatComment[] = [];\r\n    hubConnection: HubConnection | null = null;\r\n    \r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    createHubConnection = (activityId: string) => {\r\n        if (store.activityStore.selectedActivity) {\r\n            this.hubConnection = new HubConnectionBuilder().withUrl(process.env.REACT_APP_CHAT_URL + '?activityId=' + activityId, {\r\n                accessTokenFactory: () => store.userStore.user?.token!\r\n            })\r\n            .withAutomaticReconnect()\r\n            .configureLogging(LogLevel.Information)\r\n            .build();\r\n\r\n            this.hubConnection.start().catch(error => console.log(\"Error establishing the hub connection\"));\r\n\r\n            this.hubConnection.on('LoadComments', (comments:ChatComment[]) => {\r\n                runInAction(() => {\r\n                    comments.forEach(comment => {\r\n                        comment.createdAt = new Date(comment.createdAt + 'Z');\r\n                    });\r\n                    this.comments = comments\r\n                })\r\n            });\r\n\r\n            this.hubConnection.on('ReceiveComment', (comment:ChatComment) => {\r\n                runInAction(() => {\r\n                    comment.createdAt = new Date(comment.createdAt);\r\n                    this.comments.unshift(comment);\r\n                })\r\n            });\r\n        }\r\n    }\r\n\r\n    stopHubConnetion = () => {\r\n        this.hubConnection?.stop().catch(error => console.log('Error stopping the connection:', error));\r\n    }\r\n\r\n    clearComments = () => {\r\n        this.comments = [];\r\n        this.stopHubConnetion();\r\n    }\r\n\r\n    addComment = async (values:any) => {\r\n        values.activityId = store.activityStore.selectedActivity?.id;\r\n        try {\r\n            await this.hubConnection?.invoke('SendComment', values);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n\r\n    }\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link, NavLink } from \"react-router-dom\";\r\nimport { Button, Container, Dropdown, Image, Menu } from \"semantic-ui-react\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\nexport default observer(function NavBar() {\r\n    const { userStore: { user, logout, isLoggedIn } } = useStore();\r\n\r\n    return (\r\n        <Menu inverted fixed=\"top\">\r\n            <Container>\r\n                <Menu.Item as={NavLink} to='/' exact header>\r\n                    <img src=\"/assets/logo.png\" alt=\"logo\" style={{ marginRight: \"10px\" }} /> Reactivities\r\n                </Menu.Item>\r\n                {isLoggedIn &&\r\n                    <>\r\n                        <Menu.Item as={NavLink} to='/activities' name=\"Activities\" />\r\n                        <Menu.Item as={NavLink} to='/errors' name=\"Errors\" />\r\n                        <Menu.Item name=\"Activities\">\r\n                            <Button as={NavLink} to='/createActivity' positive content=\"Create Activity\" />\r\n                        </Menu.Item>\r\n                        <Menu.Item position='right'>\r\n                            <Image src={user?.image || '/assets/user.png'} avatar spaced='right' />\r\n                            <Dropdown pointing='top left' text={user?.displayName}>\r\n                                <Dropdown.Menu>\r\n                                    <Dropdown.Item as={Link} to={`/profiles/${user?.username}`} text='My Profile' icon='user' />\r\n                                    <Dropdown.Item onClick={logout} text='Logout' icon='power' />\r\n                                </Dropdown.Menu>\r\n                            </Dropdown>\r\n                        </Menu.Item>\r\n                    </>\r\n                }\r\n            </Container>\r\n        </Menu>\r\n    );\r\n})\r\n","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport Calendar from 'react-calendar';\r\nimport { Header, Menu } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nexport default observer(function ActivityFilters() {\r\n   const {activityStore: {predicate, setPredicate}} = useStore();\r\n   return (\r\n      <>\r\n         <Menu vertical size='large' style={{ width: '100%', marginTop: 25 }}>\r\n            <Header icon='filter' attached color='teal' content='Filters' />\r\n            <Menu.Item \r\n               content='All Activities'\r\n               active={predicate.has('all')}\r\n               onClick={() => setPredicate('all', 'true')}\r\n            />\r\n            <Menu.Item\r\n               content=\"I'm going\"\r\n               active={predicate.has('isGoing')}\r\n               onClick={() => setPredicate('isGoing', 'true')}\r\n            />\r\n            <Menu.Item \r\n               content=\"I'm hosting\"\r\n               active={predicate.has('isHost')}\r\n               onClick={() => setPredicate('isHost', 'true')}\r\n            />\r\n         </Menu>\r\n         <Header />\r\n         <Calendar \r\n            onChange={(date: any) => setPredicate('startDate', date as Date)}\r\n            value={predicate.get('startDate') || new Date()}\r\n         />\r\n      </>\r\n   );\r\n})\r\n","import { observer } from 'mobx-react-lite';\r\nimport React, { SyntheticEvent } from 'react';\r\nimport { Reveal, Button } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function FollowButton({ profile }: Props) {\r\n    const {profileStore, userStore} = useStore();\r\n    const {updateFollowing, loading} = profileStore;\r\n\r\n    if (userStore.user?.username === profile.username) return null;\r\n\r\n    function handleFollow(e: SyntheticEvent, username: string) {\r\n        e.preventDefault();\r\n        profile.following ? updateFollowing(username, false) : updateFollowing(username, true);\r\n    }\r\n\r\n    return (\r\n        <Reveal animated='move'>\r\n            <Reveal.Content visible style={{ width: '100%' }}>\r\n                <Button \r\n                    fluid \r\n                    color='teal' \r\n                    content={profile.following ? \"Following\" : \"Not following\"}\r\n                />\r\n            </Reveal.Content>\r\n            <Reveal.Content hidden style={{ width: '100%' }}>\r\n                <Button \r\n                    fluid\r\n                    color={profile.following ? 'red' : 'green'} \r\n                    content={profile.following ? 'Unfollow' : 'Follow'}\r\n                    loading={loading}\r\n                    onClick={(e) => handleFollow(e, profile.username)}\r\n                />\r\n            </Reveal.Content>\r\n        </Reveal>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Card, Icon, Image } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport FollowButton from './FollowButton';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileCard({ profile }: Props) {\r\n    function truncate(str: string | undefined) {\r\n        if (str)\r\n        {\r\n            return str.length > 40 ? str.substring(0, 37) + '...' : str;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Card as={Link} to={`/profiles/${profile.username}`}>\r\n            <Image src={profile.image || '/assets/user.png'} />\r\n            <Card.Content>\r\n                <Card.Header>{profile.displayName}</Card.Header>\r\n                <Card.Description>{truncate(profile.bio)}</Card.Description>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <Icon name='user' />\r\n                {profile.followersCount}\r\n            </Card.Content>\r\n            <FollowButton profile={profile} />\r\n        </Card>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Image, List, Popup } from 'semantic-ui-react';\r\nimport { Profile } from '../../../app/models/profile';\r\nimport ProfileCard from '../../profiles/ProfileCard';\r\n\r\ninterface Props {\r\n    attendees: Profile[];\r\n}\r\n\r\nexport default observer(function ActivityListItemAttendee({ attendees }: Props) {\r\n    const styles = {\r\n        borderColor: 'orange',\r\n        borderWidth: 3\r\n    }\r\n\r\n    return (\r\n        <List horizontal>\r\n            {attendees.map(attendee => (\r\n                <Popup\r\n                    hoverable\r\n                    key={attendee.username}\r\n                    trigger={\r\n                        <List.Item key={attendee.username} as={Link} to={`/profiles/${attendee.username}`}>\r\n                            <Image \r\n                                size='mini' \r\n                                circular \r\n                                src={attendee.image || 'assets/user.png'}\r\n                                bordered\r\n                                style={attendee.following ? styles : null}\r\n                            />\r\n                        </List.Item>\r\n                    }\r\n                >\r\n                    <Popup.Content>\r\n                        <ProfileCard profile={attendee} />\r\n                    </Popup.Content>\r\n                </Popup>\r\n\r\n            ))}\r\n        </List>\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Icon, Item, Label, Segment } from 'semantic-ui-react';\r\nimport { Activity } from '../../../app/models/activity';\r\nimport ActivityListItemAttendee from './ActivityListItemAttendee';\r\n\r\ninterface Props {\r\n   activity: Activity;\r\n}\r\n\r\nexport default observer(function ActivityListItem({ activity }: Props) {\r\n\r\n   return (\r\n      <Segment.Group>\r\n         <Segment>\r\n            {activity.isCancelled &&\r\n               <Label attached='top' color='red' content='Cancelled' style={{ textAlign: 'center' }} />\r\n            }\r\n            <Item.Group>\r\n               <Item>\r\n                  <Item.Image stype={{ marginBottom: 3 }} size='tiny' circular src={activity.host?.image || '/assets/user.png'} />\r\n                  <Item.Content>\r\n                     <Item.Header as={Link} to={`/activities/${activity.id}`}>\r\n                        {activity.title}\r\n                     </Item.Header>\r\n                     <Item.Description>Hosted by <Link to={`/profiles/${activity.host?.username}`}>{activity.host?.displayName}</Link></Item.Description>\r\n                     {activity.isHost && (\r\n                        <Item.Description>\r\n                           <Label basic color='orange'>You are hosting this activity</Label>\r\n                        </Item.Description>\r\n                     )}\r\n                     {activity.isGoing && !activity.isHost && (\r\n                        <Item.Description>\r\n                           <Label basic color='green'>You are going to this activity</Label>\r\n                        </Item.Description>\r\n                     )}\r\n                  </Item.Content>\r\n               </Item>\r\n            </Item.Group>\r\n         </Segment>\r\n         <Segment>\r\n            <span>\r\n               <Icon name='clock' /> {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n               <Icon name='marker' /> {activity.venue}\r\n            </span>\r\n         </Segment>\r\n         <Segment secondary>\r\n            <ActivityListItemAttendee attendees={activity.attendees!} />\r\n         </Segment>\r\n         <Segment clearing>\r\n            <span>{activity.description}</span>\r\n            <Button as={Link} to={`/activities/${activity.id}`} color='teal' floated='right' content='View' />\r\n         </Segment>\r\n      </Segment.Group>\r\n   );\r\n});","import React, { Fragment } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Header } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityListItem from './ActivityListItem';\r\n\r\nexport default observer(function ActivityList() {\r\n   const { activityStore } = useStore();\r\n   const { groupedActivities } = activityStore;\r\n\r\n   return (\r\n      <>\r\n         {groupedActivities.map(([group, activities]) => (\r\n            <Fragment key={group}>\r\n               <Header sub color='teal'>\r\n                  {group}\r\n               </Header>\r\n               {activities.map(activity => (\r\n                  <ActivityListItem key={activity.id} activity={activity} />\r\n               ))}\r\n            </Fragment>\r\n         ))}\r\n      </>\r\n   );\r\n});\r\n","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nexport default function ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};\r\n","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Grid, Loader } from 'semantic-ui-react';\r\nimport { PagingParams } from '../../../app/models/pagination';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityFilters from './ActivityFilters';\r\nimport ActivityList from './ActivityList';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\nimport ActivityListItemPlaceholder from './ActivityListItemPlaceholder';\r\n\r\nexport default observer(function ActivityDashboard() {\r\n   const { activityStore } = useStore();\r\n   const { loadActivities, activityRegistry, setPagingParams, pagination } = activityStore;\r\n   const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n   function handleGetNext() {\r\n      setLoadingNext(true);\r\n      setPagingParams(new PagingParams(pagination!.currentPage + 1));\r\n      loadActivities().then(() => setLoadingNext(false));\r\n   }\r\n   useEffect(() => {\r\n      if (activityRegistry.size <= 1) loadActivities();\r\n   }, [activityRegistry.size, loadActivities]);\r\n\r\n   return (\r\n      <Grid>\r\n         <Grid.Column width='10'>\r\n            {activityStore.loadingInitial && !loadingNext ? (\r\n               <>\r\n                  <ActivityListItemPlaceholder />\r\n               </>\r\n            ) : (\r\n               <InfiniteScroll\r\n                  pageStart={0}\r\n                  loadMore={handleGetNext}\r\n                  hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\r\n                  initialLoad={false}\r\n               >\r\n                  <ActivityList />\r\n               </InfiniteScroll>\r\n            )}\r\n         </Grid.Column>\r\n         <Grid.Column width='6'>\r\n            <ActivityFilters />\r\n         </Grid.Column>\r\n         <Grid.Column width={10}>\r\n            <Loader active={loadingNext} />\r\n         </Grid.Column>\r\n      </Grid>\r\n   );\r\n});\r\n","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    label?: string;\r\n    type?: string;\r\n}\r\n\r\nexport default function MyTextInput(props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <input {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Button, Header, Label } from 'semantic-ui-react';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nexport default observer(function LoginForm() {\r\n    const { userStore } = useStore();\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{ email: '', password: '', error: null }}\r\n            onSubmit={(values, { setErrors }) => userStore.login(values).catch(error =>\r\n                setErrors({ error: error.response.data }))}\r\n        >\r\n            {({ handleSubmit, isSubmitting, errors }) => (\r\n                <Form className='ui form' onSubmit={handleSubmit}>\r\n                    <Header as='h2' content='Login to Reactivities' color='teal' textAlign='center' />\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage\r\n                        name='error'\r\n                        render={() =>\r\n                            <Label style={{ marginBottom: 10 }} basic color='red' content={errors.error} />}\r\n                    />\r\n                    <Button loading={isSubmitting} positive content='Login' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import React from 'react';\r\nimport { Message } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n   errors: any;\r\n}\r\n\r\nexport default function ValidationErrors({ errors }: Props) {\r\n   return (\r\n      <Message error>\r\n         {errors && (\r\n            <Message.List>\r\n               {errors.map((err: any, i: any) => (\r\n                  <Message.Item key={i}>{err}</Message.Item>\r\n               ))}\r\n            </Message.List>\r\n         )}\r\n      </Message>\r\n   );\r\n}\r\n","import { ErrorMessage, Form, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Button, Header } from 'semantic-ui-react';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport { useStore } from '../../app/stores/store';\r\nimport * as Yup from 'yup';\r\nimport ValidationErrors from '../errors/ValidationErrors';\r\n\r\nexport default observer(function RegisterForm() {\r\n    const {userStore} = useStore();\r\n\r\n    return (\r\n        <Formik \r\n            initialValues={{displayName: '', username: '' ,email: '', password: '', error: null}}\r\n            onSubmit={(values, {setErrors}) => userStore.register(values).catch(error => \r\n                setErrors({error}))}\r\n                validationSchema={Yup.object({\r\n                    displayName: Yup.string().required(),\r\n                    username: Yup.string().required(),\r\n                    email: Yup.string().required().email(),\r\n                    password: Yup.string().required(),\r\n                })}\r\n        >\r\n            {({handleSubmit, isSubmitting, errors, isValid, dirty}) => (\r\n                <Form className='ui form error' onSubmit={handleSubmit}>\r\n                    <Header as='h2' content='Sign up to Reactivities' color='teal' textAlign='center' />\r\n                    <MyTextInput name='displayName' placeholder='Display Name' />\r\n                    <MyTextInput name='username' placeholder='Username' />\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage\r\n                        name='error' \r\n                        render={() => \r\n                        <ValidationErrors errors={errors.error} />} \r\n                    />\r\n                    <Button disabled={!isValid || !dirty || isSubmitting} \r\n                        loading={isSubmitting} positive content='Register' type='submit' fluid \r\n                    />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Container, Header, Segment, Image, Button, Divider } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport LoginForm from '../users/LoginForm';\r\nimport RegisterForm from '../users/RegisterForm';\r\n\r\nexport default observer(function HomePage() {\r\n   const { userStore, modalStore } = useStore();\r\n\r\n   return (\r\n      <Segment inverted textAlign='center' vertical className='masthead'>\r\n         <Container text>\r\n            <Header as='h1' inverted>\r\n               <Image size='massive' src='/assets/logo.png' alt='logo' style={{ marginBottom: 12 }} />\r\n               Reactivities\r\n            </Header>\r\n            {userStore.isLoggedIn\r\n               ?\r\n               (\r\n                  <>\r\n                     <Header as='h2' inverted content='Welcome to Reactivities' />\r\n                     <Button as={Link} to='/activities' size='huge' inverted>\r\n                        Go to Activities!\r\n                     </Button>\r\n                  </>\r\n               )\r\n               :\r\n               (\r\n                  <>\r\n                     <Button onClick={() => modalStore.openModal(<LoginForm />)} size='huge' inverted>\r\n                        Login!\r\n                     </Button>\r\n                     <Button onClick={() => modalStore.openModal(<RegisterForm />)} size='huge' inverted>\r\n                        Register!\r\n                     </Button>\r\n                     <Divider horizontal inverted >Or</Divider>\r\n                     <Button \r\n                        loading={userStore.fbLoading}\r\n                        size='huge'\r\n                        inverted\r\n                        color='facebook'\r\n                        content='Login with Facebook'\r\n                        onClick={userStore.facebookLogin}\r\n                     />\r\n                  </>\r\n               )\r\n            }\r\n         </Container>\r\n      </Segment>\r\n   );\r\n})\r\n","import React from 'react';\r\nimport { Dimmer, Loader } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    inverted?: boolean;\r\n    content?: string;\r\n}\r\n\r\nexport default function LoadingComponent({inverted = true, content = 'Loading...'}: Props) {\r\n    return (\r\n        <Dimmer active={true} inverted={inverted}>\r\n            <Loader content={content} />\r\n        </Dimmer>\r\n    )\r\n}","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    rows: number;\r\n    label?: string;\r\n}\r\n\r\nexport default function MyTextArea(props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <textarea {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label, Select } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    options: any;\r\n    label?: string;\r\n}\r\n\r\nexport default function MySelectInput(props: Props) {\r\n    const [field, meta, helpers] = useField(props.name);\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <Select\r\n                clearable\r\n                options={props.options}\r\n                value={field.value || null}\r\n                onChange={(e, d) => helpers.setValue(d.value)}\r\n                onBlur={(() => helpers.setTouched(true))}\r\n                placeholder={props.placeholder}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","export const categoryOptions = [\r\n    {text: 'Drinks', value: 'drinks'},\r\n    {text: 'Culture', value: 'culture'},\r\n    {text: 'Film', value: 'film'},\r\n    {text: 'Food', value: 'food'},\r\n    {text: 'Music', value: 'music'},\r\n    {text: 'Travel', value: 'travel'},\r\n]","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\nimport DatePicker, {ReactDatePickerProps} from 'react-datepicker';\r\n\r\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>) {\r\n    const [field, meta, helpers] = useField(props.name!);\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <DatePicker\r\n                {...field}\r\n                {...props}\r\n                selected={(field.value && new Date(field.value)) || null}\r\n                onChange={value => helpers.setValue(value)}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\nimport React, { useState, useEffect } from \"react\";\nimport { Link, useHistory, useParams } from \"react-router-dom\";\nimport { Button, Header, Segment } from \"semantic-ui-react\";\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\nimport { useStore } from \"../../../app/stores/store\";\nimport { Form, Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport MyTextInput from \"../../../app/common/form/MyTextInput\";\nimport MyTextArea from \"../../../app/common/form/MyTextArea\";\nimport MySelectInput from \"../../../app/common/form/MySelectInput\";\nimport { categoryOptions } from \"../../../app/common/options/categoryOptions\";\nimport MyDateInput from \"../../../app/common/form/MyDateInput\";\nimport { ActivityFormValues } from \"../../../app/models/activity\";\nimport {v4 as uuid} from 'uuid';\n\nexport default observer(function ActivityForm() {\n    const history = useHistory();\n    const { activityStore } = useStore();\n    const {\n        createActivity,\n        updateActivity,\n        loadActivity,\n        loadingInitial,\n    } = activityStore;\n    const { id } = useParams<{ id: string }>();\n\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\n\n    const validationSchema = Yup.object({\n        title: Yup.string().required(\"The activity title is required\"),\n        description: Yup.string().required(\"The activity description is required\"),\n        category: Yup.string().required(),\n        date: Yup.string().required(\"Date is required\").nullable(),\n        venue: Yup.string().required(),\n        city: Yup.string().required(),\n    });\n\n    useEffect(() => {\n        if (id) loadActivity(id).then((activity) => setActivity(new ActivityFormValues(activity)));\n    }, [id, loadActivity]);\n\n    function handleFormSubmit(activity: ActivityFormValues) {\n        if (!activity.id)\n        {\n            let newActivity = {\n                ...activity,\n                id: uuid(),\n            };\n            createActivity(newActivity).then(() => history.push(`/activities/${newActivity.id}`));\n        } else\n        {\n            updateActivity(activity).then(() => history.push(`/activities/${activity.id}`));\n        }\n    }\n\n    if (loadingInitial) return <LoadingComponent content=\"Loading activity...\" />;\n\n    return (\n        <Segment clearing>\n            <Header content='Activity Details' sub color='teal' />\n            <Formik\n                validationSchema={validationSchema}\n                enableReinitialize\n                initialValues={activity}\n                onSubmit={(values) => handleFormSubmit(values)}>\n                {({ handleSubmit, isValid, isSubmitting, dirty }) => (\n                    <Form className=\"ui form\" onSubmit={handleSubmit} autoComplete=\"off\">\n                        <MyTextInput placeholder='Title' name='title' />\n                        <MyTextArea rows={3} placeholder=\"Description\" name=\"description\" />\n                        <MySelectInput options={categoryOptions} placeholder=\"Category\" name=\"category\" />\n                        <MyDateInput\n                            placeholderText=\"Date\"\n                            name=\"date\"\n                            showTimeSelect\n                            timeCaption='time'\n                            dateFormat='MMMM d, yyyy h:mm aa'\n                        />\n                        <Header content='Location Detils' sub color='teal' />\n                        <MyTextInput placeholder=\"City\" name=\"city\" />\n                        <MyTextInput placeholder=\"Venue\" name=\"venue\" />\n                        <Button \n                            disabled={isSubmitting || !dirty || !isValid}\n                            loading={isSubmitting}\n                            floated=\"right\" \n                            positive \n                            type=\"submit\" \n                            content=\"Submit\" \n                        />\n                        <Button as={Link} to=\"/activities\" floated=\"right\" type=\"button\" content=\"Cancel\" />\n                    </Form>\n                )}\n            </Formik>\n        </Segment>\n    );\n});\n","import { Formik, Form, Field, FieldProps } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React, { useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Segment, Header, Comment, Loader } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport * as Yup from 'yup';\r\nimport { formatDistanceToNow } from 'date-fns/esm';\r\n\r\ninterface Props {\r\n   activityId: string;\r\n}\r\n\r\nexport default observer(function ActivityDetailedChat({ activityId }: Props) {\r\n   const { commentStore } = useStore();\r\n\r\n   useEffect(() => {\r\n      if (activityId)\r\n      {\r\n         commentStore.createHubConnection(activityId);\r\n      }\r\n\r\n      return () => {\r\n         commentStore.clearComments();\r\n      }\r\n   }, [commentStore, activityId]);\r\n   return (\r\n      <>\r\n         <Segment textAlign='center' attached='top' inverted color='teal' style={{ border: 'none' }}>\r\n            <Header>Chat about this event</Header>\r\n         </Segment>\r\n         <Segment attached clearing>\r\n            <Formik\r\n               onSubmit={(values, { resetForm }) =>\r\n                  commentStore.addComment(values).then(() => resetForm())}\r\n               initialValues={{ body: '' }}\r\n               validationSchema={Yup.object({\r\n                  body: Yup.string().required()\r\n               })}\r\n            >\r\n               {({ isSubmitting, isValid, handleSubmit }) => (\r\n                  <Form className='ui form'>\r\n                     <Field name='body'>\r\n                        {(props: FieldProps) => (\r\n                           <div style={{ position: 'relative' }}>\r\n                              <Loader active={isSubmitting} />\r\n                              <textarea\r\n                                 placeholder='Enter your comment (Enter to submit, SHIFT + Enter for new line)'\r\n                                 rows={2}\r\n                                 {...props.field}\r\n                                 onKeyPress={e => {\r\n                                    if (e.key === 'Enter' && e.shiftKey)\r\n                                    {\r\n                                       return;\r\n                                    }\r\n                                    if (e.key === 'Enter' && !e.shiftKey)\r\n                                    {\r\n                                       e.preventDefault();\r\n                                       isValid && handleSubmit();\r\n                                    }\r\n                                 }}\r\n                              />\r\n                           </div>\r\n                        )}\r\n                     </Field>\r\n                  </Form>\r\n               )}\r\n            </Formik>\r\n            <Comment.Group>\r\n               {commentStore.comments.map(comment => (\r\n                  <Comment key={comment.id}>\r\n                     <Comment.Avatar src={comment.image || '/assets/user.png'} />\r\n                     <Comment.Content>\r\n                        <Comment.Author as={Link} to={`/profiles/${comment.username}`}>{comment.displayName}</Comment.Author>\r\n                        <Comment.Metadata>\r\n                           <div>{formatDistanceToNow(comment.createdAt)} ago</div>\r\n                        </Comment.Metadata>\r\n                        <Comment.Text style={{ whiteSpace: 'pre-wrap' }}>{comment.body}</Comment.Text>\r\n                     </Comment.Content>\r\n                  </Comment>\r\n               ))}\r\n            </Comment.Group>\r\n         </Segment>\r\n      </>\r\n   );\r\n});\r\n","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Header, Item, Segment, Image, Label } from 'semantic-ui-react'\r\nimport { Activity } from \"../../../app/models/activity\";\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedHeader({ activity }: Props) {\r\n    const { activityStore: { updateAttendance, loading, cancelActivityToggle } } = useStore();\r\n\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{ padding: '0' }}>\r\n                {activity.isCancelled && (\r\n                    <Label\r\n                        stype={{ position: 'absolute', zIndex: 1000, left: -14, top: 20 }}\r\n                        ribbon colo='red' content='Cancelled'\r\n                    />\r\n                )}\r\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle} />\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={activity.title}\r\n                                    style={{ color: 'white' }}\r\n                                />\r\n                                <p>{format(activity.date!, 'dd MMM yyyy')}</p>\r\n                                <p>\r\n                                    Hosted by <strong><Link to={`/profile/${activity.host?.username}`}>{activity.host?.displayName}</Link></strong>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {activity.isHost ? (\r\n                    <>\r\n                        <Button \r\n                            color={activity.isCancelled ? 'green' : 'red'}\r\n                            floated='left'\r\n                            basic\r\n                            content={activity.isCancelled ? 'Re-activate activity' : 'Cancel activity'}    \r\n                            onClick={cancelActivityToggle}\r\n                            loading={loading}\r\n                        />\r\n                        <Button\r\n                            disabled={activity.isCancelled}\r\n                            as={Link} \r\n                            to={`/manage/${activity.id}`} \r\n                            color='orange' floated='right'>\r\n                            Manage Event\r\n                        </Button>\r\n                    </>\r\n                ) : activity.isGoing ? (\r\n                    <Button \r\n                        loading={loading} \r\n                        onClick={updateAttendance}>\r\n                        Cancel attendance\r\n                    </Button>\r\n\r\n                ) : (\r\n                    <Button \r\n                        disabled={activity.isCancelled} \r\n                        loading={loading} \r\n                        onClick={updateAttendance} \r\n                        color='teal'>\r\n                        Join Activity\r\n                    </Button>\r\n                )}\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Segment, Grid, Icon } from 'semantic-ui-react';\r\nimport { Activity } from '../../../app/models/activity';\r\n\r\ninterface Props {\r\n   activity: Activity;\r\n}\r\n\r\nexport default observer(function ActivityDetailedInfo({ activity }: Props) {\r\n   return (\r\n      <Segment.Group>\r\n         <Segment attached='top'>\r\n            <Grid>\r\n               <Grid.Column width={1}>\r\n                  <Icon size='large' color='teal' name='info' />\r\n               </Grid.Column>\r\n               <Grid.Column width={15}>\r\n                  <p>{activity.description}</p>\r\n               </Grid.Column>\r\n            </Grid>\r\n         </Segment>\r\n         <Segment attached>\r\n            <Grid verticalAlign='middle'>\r\n               <Grid.Column width={1}>\r\n                  <Icon name='calendar' size='large' color='teal' />\r\n               </Grid.Column>\r\n               <Grid.Column width={15}>\r\n                  <span>{format(activity.date!, 'dd MMM yyyy h:mm aa')}</span>\r\n               </Grid.Column>\r\n            </Grid>\r\n         </Segment>\r\n         <Segment attached>\r\n            <Grid verticalAlign='middle'>\r\n               <Grid.Column width={1}>\r\n                  <Icon name='marker' size='large' color='teal' />\r\n               </Grid.Column>\r\n               <Grid.Column width={11}>\r\n                  <span>\r\n                     {activity.venue}, {activity.city}\r\n                  </span>\r\n               </Grid.Column>\r\n            </Grid>\r\n         </Segment>\r\n      </Segment.Group>\r\n   );\r\n});\r\n","import React from 'react';\r\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Activity } from '../../../app/models/activity';\r\n\r\ninterface Props {\r\n   activity: Activity;\r\n}\r\n\r\nexport default observer(function ActivityDetailedSidebar({ activity: { attendees, host } }: Props) {\r\n   if (!attendees) return null;\r\n\r\n   return (\r\n      <>\r\n         <Segment textAlign='center' style={{ border: 'none' }} attached='top' secondary inverted color='teal'>\r\n            {attendees.length} {attendees.length === 1 ? 'Person' : 'People'} going\r\n         </Segment>\r\n         <Segment attached>\r\n            <List relaxed divided>\r\n               {attendees.map(attendee => (\r\n                  <Item style={{ position: 'relative' }} key={attendee.username}>\r\n                     {attendee.username === host?.username && (\r\n                        <Label style={{ position: 'absolute' }} color='orange' ribbon='right'>\r\n                           Host\r\n                        </Label>\r\n                     )}\r\n                     <Image size='tiny' src={attendee.image || '/assets/user.png'} />\r\n                     <Item.Content verticalAlign='middle'>\r\n                        <Item.Header as='h3'>\r\n                           <Link to={`/profiles/${attendee.username}`}>{attendee.displayName}</Link>\r\n                        </Item.Header>\r\n                        {attendee.following && (\r\n                           <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>\r\n                        )}\r\n                     </Item.Content>\r\n                  </Item>\r\n               ))}\r\n            </List>\r\n         </Segment>\r\n      </>\r\n   );\r\n});\r\n","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityDetailedChat from './ActivityDetailedChat';\r\nimport ActivityDetailedHeader from './ActivityDetailedHeader';\r\nimport ActivityDetailedInfo from './ActivityDetailedInfo';\r\nimport ActivityDetailedSidebar from './ActivityDetailedSidebar';\r\n\r\nexport default observer(function ActivityDetails() {\r\n   const { activityStore } = useStore();\r\n   const { selectedActivity: activity, loadActivity, loadingInitial, clearSelectedActivity } = activityStore;\r\n   const { id } = useParams<{ id: string }>();\r\n\r\n   useEffect(() => {\r\n      console.log(id);\r\n      if (id) loadActivity(id);\r\n      return () => clearSelectedActivity();\r\n   }, [id, loadActivity, clearSelectedActivity]);\r\n\r\n   if (loadingInitial || !activity) return <LoadingComponent />\r\n\r\n   return (\r\n      <Grid>\r\n         <Grid.Column width={10}>\r\n            <ActivityDetailedHeader activity={activity} />\r\n            <ActivityDetailedInfo activity={activity} />\r\n            <ActivityDetailedChat activityId={activity.id} />\r\n         </Grid.Column>\r\n         <Grid.Column width={6} >\r\n            <ActivityDetailedSidebar activity={activity} />\r\n         </Grid.Column>\r\n      </Grid>\r\n   );\r\n})\r\n","import React from 'react';\r\nimport {Button, Header, Segment} from \"semantic-ui-react\";\r\nimport axios from 'axios';\r\nimport { useState } from 'react';\r\nimport ValidationErrors from './ValidationErrors';\r\n\r\nexport default function TestErrors() {\r\n    const baseUrl = process.env.REACT_APP_API_URL;\r\n    const [errors, setErrors] = useState(null);\r\n\r\n    function handleNotFound() {\r\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadRequest() {\r\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleServerError() {\r\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleUnauthorised() {\r\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadGuid() {\r\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleValidationError() {\r\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' content='Test Error component' />\r\n            <Segment>\r\n                <Button.Group widths='7'>\r\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\r\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\r\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\r\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\r\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\r\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\r\n                </Button.Group>\r\n            </Segment>\r\n            {errors &&\r\n                <ValidationErrors errors={errors} />\r\n            }\r\n        </>\r\n    )\r\n}","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react';\r\n\r\nexport default function NotFound() {\r\n    return (\r\n        <Segment placeholder>\r\n            <Header icon>\r\n                <Icon name='search' />\r\n                Oops - we've looked everywhere and could not find this\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={Link} to='/activities' primary>\r\n                    Return to activities page\r\n                </Button>\r\n            </Segment.Inline>\r\n        </Segment>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Container, Header, Segment } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nexport default observer(function ServerError() {\r\n    const {commonStore} = useStore();\r\n\r\n    return (\r\n        <Container>\r\n            <Header as='h1' content='Server Error' />\r\n            <Header sub as='h5' color='red' content={commonStore.error?.message} />\r\n            {commonStore.error?.details &&\r\n                <Segment>\r\n                    <Header as='h4' content='Stack trace' color='teal' />\r\n                    <code style={{marginTop: '10px'}}>{commonStore.error.details}</code>\r\n                </Segment>\r\n            }\r\n        </Container>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Modal } from 'semantic-ui-react';\r\nimport { useStore } from '../../stores/store';\r\n\r\nexport default observer(function ModalContainer() {\r\n    const { modalStore } = useStore();\r\n\r\n    return (\r\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\r\n            <Modal.Content>\r\n                {modalStore.modal.body}\r\n            </Modal.Content>\r\n        </Modal>\r\n    )\r\n})","import React from 'react';\r\nimport { Cropper } from 'react-cropper';\r\nimport 'cropperjs/dist/cropper.css';\r\n\r\ninterface Props {\r\n    imagePreview: string;\r\n    setCropper: (cropper: Cropper) => void;\r\n}\r\n\r\nexport default function PhotoWidgetCropper({ imagePreview, setCropper }: Props) {\r\n    return (\r\n        <Cropper\r\n            src={imagePreview}\r\n            style={{ height: 200, width: '100%' }}\r\n            initialAspectRatio={1}\r\n            aspectRatio={1}\r\n            preview='.img-preview'\r\n            guides={false}\r\n            viewMode={1}\r\n            autoCropArea={1}\r\n            background={false}\r\n            onInitialized={cropper => setCropper(cropper)}\r\n        />\r\n    )\r\n}","import React, { useCallback } from 'react'\r\nimport { useDropzone } from 'react-dropzone'\r\nimport { Header, Icon } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    setFiles: (files: any) => void;\r\n}\r\n\r\nexport default function PhotoWidgetDropzone({ setFiles }: Props) {\r\n    const dzStyles = {\r\n        border: 'dashed 3px #eee',\r\n        borderColor: '#eee',\r\n        borderRadius: '5px',\r\n        paddingTop: '30px',\r\n        textAlign: 'center' as 'center',\r\n        height: 200,\r\n    }\r\n\r\n    const dzActive = {\r\n        borderColor: 'green'\r\n    }\r\n\r\n    const onDrop = useCallback(acceptedFiles => {\r\n        setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\r\n            preview: URL.createObjectURL(file)\r\n        })))\r\n    }, [setFiles]);\r\n\r\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop })\r\n\r\n    return (\r\n        <div {...getRootProps()} style={isDragActive ? { ...dzStyles, ...dzActive } : dzStyles}>\r\n            <input {...getInputProps()} />\r\n            <Icon name='upload' size='huge' />\r\n            <Header content='Drop image here' /> \r\n        </div>\r\n    )\r\n}","import React, { useEffect } from 'react';\r\nimport { useState } from 'react';\r\nimport { Button, Grid, Header } from 'semantic-ui-react';\r\nimport PhotoWidgetCropper from './PhotoWidgetCropper';\r\nimport PhotoWidgetDropzone from './PhotoWidgetDropzone';\r\n\r\ninterface Props {\r\n    loading: boolean;\r\n    uploadPhoto: (file: Blob) => void;\r\n}\r\n\r\nexport default function PhotoUploadWidget({ loading, uploadPhoto }: Props) {\r\n    const [files, setFiles] = useState<any>([]);\r\n    const [cropper, setCropper] = useState<Cropper>();\r\n\r\n    function onCrop() {\r\n        if (cropper)\r\n        {\r\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview))\r\n        }\r\n    }, [files]);\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={4}>\r\n                <Header color='teal' content='Step 1 - Add Photo' />\r\n                <PhotoWidgetDropzone setFiles={setFiles} />\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header color='teal' content='Step 2 - Resize Image' />\r\n                {files && files.length > 0 && (\r\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header color='teal' content='Step 1 - Preview & Upload' />\r\n                {files && files.length > 0 &&\r\n                    <>\r\n                        <div className='img-preview' style={{ minHeight: 200, overflow: 'hidden' }} />\r\n                        <Button.Group widths={2}>\r\n                            <Button loading={loading} onClick={onCrop} positive icon='check' />\r\n                            <Button disabled={loading} onClick={() => setFiles([])} icon='close' />\r\n                        </Button.Group>\r\n                    </>\r\n                }\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React, { SyntheticEvent, useState } from 'react';\r\nimport { Card, Header, Tab, Image, Grid, Button } from 'semantic-ui-react';\r\nimport PhotoUploadWidget from '../../app/common/imageUpload/PhotoUploadWidget';\r\nimport { Photo, Profile } from '../../app/models/profile';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfilePhotos({ profile }: Props) {\r\n    const { profileStore: { isCurrentUser, uploadPhoto, uploading, loading, setMainPhoto, deletePhoto } } = useStore();\r\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n    const [target, setTarget] = useState('');\r\n\r\n    function handlePhotoUpload(file: Blob) {\r\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\r\n    }\r\n\r\n    function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        setMainPhoto(photo);\r\n    }\r\n\r\n    function handleDeletePhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        deletePhoto(photo);\r\n    }\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='image' content='Photos' />\r\n                    {isCurrentUser && (\r\n                        <Button\r\n                            floated='right' basic\r\n                            content={addPhotoMode ? 'Cancel' : 'Add Photo'}\r\n                            onClick={() => setAddPhotoMode(!addPhotoMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width={16} >\r\n                    {addPhotoMode ? (\r\n                        <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading} />\r\n                    ) : (\r\n                        <Card.Group itemsPerRow={5}>\r\n                            {profile.photos?.map(photo => (\r\n                                <Card key={photo.id}>\r\n                                    <Image src={photo.url} />\r\n                                    {isCurrentUser && (\r\n                                        <Button.Group fluid widths={2}>\r\n                                            <Button\r\n                                                basic\r\n                                                color='green'\r\n                                                content='Main'\r\n                                                name={'main' + photo.id}\r\n                                                disabled={photo.isMain}\r\n                                                loading={target === 'main' + photo.id && loading}\r\n                                                onClick={e => handleSetMainPhoto(photo, e)}\r\n                                            />\r\n                                            <Button\r\n                                                basic\r\n                                                color='red'\r\n                                                icon='trash'\r\n                                                loading={target === photo.id && loading}\r\n                                                onClick={e => handleDeletePhoto(photo, e)}\r\n                                                disabled={photo.isMain}\r\n                                                name={photo.id}\r\n                                            />\r\n                                        </Button.Group>\r\n                                    )}\r\n                                </Card>\r\n                            ))}\r\n                        </Card.Group>\r\n                    )}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import { Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Button } from \"semantic-ui-react\";\r\nimport MyTextArea from \"../../app/common/form/MyTextArea\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport * as Yup from 'yup';\r\n\r\ninterface Props {\r\n    setEditMode: (editMode: boolean) => void;\r\n}\r\n\r\nexport default observer(function ProfileEditForm({setEditMode}: Props) {\r\n    const {profileStore: {profile, updateProfile}} = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{displayName: profile?.displayName, bio: profile?.bio}}\r\n            onSubmit={values => {\r\n                updateProfile(values).then(() => {\r\n                    setEditMode(false);\r\n                })\r\n            }}\r\n            validationSchema={Yup.object({\r\n                displayName: Yup.string().required()\r\n            })}\r\n        >\r\n            {({isSubmitting, isValid, dirty}) => (\r\n                <Form className='ui form'>\r\n                    <MyTextInput placeholder='Display Name' name='displayName' />\r\n                    <MyTextArea rows={3} placeholder='Add your bio' name='bio' />\r\n                    <Button \r\n                        positive\r\n                        type='submit'\r\n                        loading={isSubmitting}\r\n                        content='Update profile'\r\n                        floated='right'\r\n                        disabled={!isValid || !dirty}\r\n                    />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import React, {useState} from 'react';\r\nimport {useStore} from \"../../app/stores/store\";\r\nimport {Button, Grid, Header, Tab} from \"semantic-ui-react\";\r\nimport ProfileEditForm from \"./ProfileEditForm\";\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nexport default observer(function ProfileAbout() {\r\n    const {profileStore} = useStore();\r\n    const {isCurrentUser, profile} = profileStore;\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width='16'>\r\n                    <Header floated='left' icon='user' content={`About ${profile?.displayName}`} />\r\n                    {isCurrentUser && (\r\n                        <Button\r\n                            floated='right'\r\n                            basic\r\n                            content={editMode ? 'Cancel' : 'Edit Profile'}\r\n                            onClick={() => setEditMode(!editMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width='16'>\r\n                    {editMode ? <ProfileEditForm setEditMode={setEditMode} /> : <span style={{whiteSpace: 'pre-wrap'}}>{profile?.bio}</span>}\r\n\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { useEffect } from 'react';\r\nimport { Card, Grid, Header, Tab } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileCard from './ProfileCard';\r\n\r\nexport default observer(function ProfileFollowings() {\r\n    const {profileStore} = useStore();\r\n    const {profile, followings, loadFollowings, loadingFollowings, activeTab} = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadFollowings('following');\r\n    }, [loadFollowings])\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingFollowings}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header \r\n                        floated='left' \r\n                        icon='user' \r\n                        content={activeTab === 3 ? `People following ${profile?.displayName}` : `People ${profile?.displayName} is following`} \r\n                    />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {followings.map(profile => (\r\n                            <ProfileCard key={profile.username} profile={profile} />\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React, { SyntheticEvent } from 'react';\r\nimport { useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Card, Grid, Header, Image, Tab, TabProps } from 'semantic-ui-react';\r\nimport { UserActivtiy } from '../../app/models/profile';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nexport default observer(function ProfileActivities() {\r\n    const panes = [\r\n        { menuItem: 'Future Events', pane: { key: 'future' } },\r\n        { menuItem: 'Past Events', pane: { key: 'past' } },\r\n        { menuItem: 'Hosting', pane: { key: 'hosting' } },\r\n    ];\r\n\r\n    const { profileStore } = useStore();\r\n    const {\r\n        loadUserActivities,\r\n        profile,\r\n        loadingActivities,\r\n        userActivities\r\n    } = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadUserActivities(profile!.username);\r\n    }, [loadUserActivities, profile]);\r\n\r\n    const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\r\n        loadUserActivities(profile!.username, panes[data.activeIndex as number].pane.key)\r\n    }\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingActivities}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='calendar' content={'Activities'} />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Tab\r\n                        panes={panes}\r\n                        menu={{ secondary: true, pointing: true }}\r\n                        onTabChange={(e, data) => handleTabChange(e, data)}\r\n                    />\r\n                    <br />\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {userActivities.map((activity: UserActivtiy) => (\r\n                            <Card\r\n                                as={Link}\r\n                                to={`/activities/${activity.id}`}\r\n                                key={activity.id}\r\n                            >\r\n                                <Image \r\n                                    src={`/assets/categoryImages/${activity.category}.jpg`} \r\n                                    style={{ minHeight: 100, objectFit: 'cover'}}\r\n                                />\r\n                                <Card.Content>\r\n                                    <Card.Header textAlign='center'>{activity.title}</Card.Header>\r\n                                    <Card.Meta textAlign='center'>\r\n                                        <div>{format(new Date(activity.date), 'do LLL')}</div>\r\n                                        <div>{format(new Date(activity.date), 'h:mm a')}</div>\r\n                                    </Card.Meta>\r\n                                </Card.Content>\r\n                            </Card>\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Tab } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport ProfilePhotos from './ProfilePhotos';\r\nimport ProfileAbout from './ProfileAbout'\r\nimport ProfileFollowings from './ProfileFollowings';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileActivities from './ProfileActivities';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileContent({profile}: Props) {\r\n    const {profileStore} = useStore();\r\n\r\n    const panes = [\r\n        { menuItem: 'About', render: () => <ProfileAbout /> },\r\n        { menuItem: 'Photos', render: () => <ProfilePhotos profile={profile} /> },\r\n        { menuItem: 'Events', render: () => <ProfileActivities /> },\r\n        { menuItem: 'Followers', render: () => <ProfileFollowings /> },\r\n        { menuItem: 'Following', render: () => <ProfileFollowings /> },\r\n    ];\r\n\r\n    return (\r\n        <Tab\r\n            menu={{ fluid: true, vertical: true }}\r\n            menuPosition='right'\r\n            panes={panes}\r\n            onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex)}\r\n        />\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Divider, Grid, Header, Image , Item, Segment, Statistic } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport FollowButton from './FollowButton';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileHeader({profile}: Props) {\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Image avatar size='small' src={profile.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Header as='h1'content={profile.displayName} />\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    <Statistic.Group widths={2}>\r\n                        <Statistic label='Followers' value={profile.followersCount} />\r\n                        <Statistic label='Following' value={profile.followingCount} />\r\n                    </Statistic.Group>\r\n                    <Divider />\r\n                    <FollowButton profile={profile} />\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Segment } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileContent from './ProfileContent';\r\nimport ProfileHeader from './ProfileHeader';\r\n\r\nexport default observer(function ProfilePage() {\r\n    const { username } = useParams<{ username: string }>();\r\n    const { profileStore } = useStore();\r\n    const { loadingProfile, loadProfile, profile, setActiveTab } = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadProfile(username);\r\n        return () => {\r\n            setActiveTab(0);\r\n        }\r\n    }, [loadProfile, username, setActiveTab]);\r\n\r\n    if (loadingProfile) return <LoadingComponent content='Loading profile...' />\r\n    return (\r\n        <Segment width={16}>\r\n            {profile &&\r\n                <>\r\n                    <ProfileHeader profile={profile} />\r\n                    <ProfileContent profile={profile} />\r\n                </>}\r\n        </Segment>\r\n    )\r\n})","import { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router-dom\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\ninterface Props extends RouteProps {\r\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\r\n}\r\n\r\nexport default function PrivateRoute({ component: Component, ...rest }: Props) {\r\n    const { userStore: { isLoggedIn } } = useStore();\r\n\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/' />}\r\n        />\r\n    )\r\n}","import { useLocation } from \"react-router-dom\";\r\n\r\nexport default function useQuery() {\r\n    return new URLSearchParams(useLocation().search);\r\n}","import React from 'react';\r\nimport { toast } from 'react-toastify';\r\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react';\r\nimport agent from '../../app/api/agent';\r\nimport useQuery from '../../app/common/util/hooks';\r\n\r\nexport default function RegisterSuccess() {\r\n    const email = useQuery().get('email') as string;\r\n\r\n    function handleConfirmEmailResend() {\r\n        agent.Account.resendEmailConfirm(email).then(() => {\r\n            toast.success('Verification email resent - please check your email');\r\n        }).catch(error => console.log(error));\r\n    }\r\n    \r\n    return (\r\n        <Segment placeholder textAlign='center'>\r\n            <Header icon color='green'>\r\n                <Icon name='check' />\r\n                    Successfully registered!\r\n            </Header>\r\n            <p>Please check your email (including junk  email) for validation email</p>\r\n            {email && \r\n                <>\r\n                    <p>Didn't receive the email? Click the below button to resend</p>\r\n                    <Button primary onClick={handleConfirmEmailResend} content='Resend email' size='huge' />\r\n                </>\r\n            }\r\n        </Segment>\r\n    )\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { toast } from 'react-toastify';\r\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react';\r\nimport agent from '../../app/api/agent';\r\nimport useQuery from '../../app/common/util/hooks';\r\nimport { useStore } from '../../app/stores/store';\r\nimport LoginForm from './LoginForm';\r\n\r\nexport default function ConfirmEmail() {\r\n    const {modalStore} = useStore();\r\n    const email = useQuery().get('email') as string;\r\n    const token = useQuery().get('token') as string;\r\n\r\n    const Status = {\r\n        Verifying: 'Verifying',\r\n        Failed: 'Failed',\r\n        Success: 'Success'\r\n    }\r\n\r\n    const [status, setStatus] = useState(Status.Verifying);\r\n\r\n    function handleConfirmEmailResend() {\r\n        agent.Account.resendEmailConfirm(email).then(() => {\r\n            toast.success('Verification email resent - please check your email');\r\n        }).catch(error => console.log(error));\r\n    }\r\n\r\n    useEffect(() => {\r\n        agent.Account.verifyEmail(token, email).then(() => {\r\n            setStatus(Status.Success);\r\n        }).catch(() => {\r\n            setStatus(Status.Failed)\r\n        })\r\n    }, [Status.Failed, Status.Success, token, email])\r\n    \r\n\r\n    function getBody() {\r\n        switch(status) {\r\n            case Status.Verifying:\r\n                return <p>Verifying...</p>;\r\n            case Status.Failed:\r\n                return (\r\n                    <div>\r\n                        <p>Verification failed. You can try resending the verify link to your email</p>\r\n                        <Button primary onClick={handleConfirmEmailResend} size='huge' content='Resend email' />\r\n                    </div>\r\n                );\r\n            case Status.Success:\r\n                return (\r\n                    <div>\r\n                        <p>Email has been verified. You can now login!</p>\r\n                        <Button primary onClick={() => modalStore.openModal(<LoginForm />)} size='huge' content='Login' />\r\n                    </div>\r\n                );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Segment placeholder textAlign='center' >\r\n            <Header icon>\r\n                <Icon name='envelope' />\r\n                Email verification\r\n            </Header>\r\n            <Segment.Inline>\r\n                {getBody()}\r\n            </Segment.Inline>\r\n\r\n        </Segment>\r\n    )\r\n}","import { Container } from 'semantic-ui-react';\r\nimport NavBar from './NavBar';\r\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Route, Switch, useLocation } from 'react-router-dom';\r\nimport HomePage from '../../features/home/HomePage';\r\nimport ActivityForm from '../../features/activities/form/ActivityForm';\r\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\r\nimport TestErrors from '../../features/errors/TestError';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport NotFound from '../../features/errors/NotFound';\r\nimport ServerError from '../../features/errors/ServerError';\r\nimport { useStore } from '../stores/store';\r\nimport { useEffect } from 'react';\r\nimport LoadingComponent from './LoadingComponent';\r\nimport ModalContainer from '../common/modals/ModalContainer';\r\nimport ProfilePage from '../../features/profiles/ProfilePage';\r\nimport PrivateRoute from './PrivateRoute';\r\nimport RegisterSuccess from '../../features/users/RegisterSuccess';\r\nimport ConfirmEmail from '../../features/users/ConfirmEmail';\r\n\r\nfunction App() {\r\n   const location = useLocation();\r\n   const { commonStore, userStore } = useStore();\r\n\r\n   useEffect(() => {\r\n      if (commonStore.token)\r\n      {\r\n         userStore.getUser().finally(() => commonStore.setAppLoaded());\r\n      } else {\r\n         userStore.getFacebookLoginStatus().then(() => commonStore.setAppLoaded());\r\n      }\r\n   }, [commonStore, userStore])\r\n\r\n   if (!commonStore.appLoaded) return <LoadingComponent content='Loading app...' />\r\n\r\n   return (\r\n      <>\r\n         <ToastContainer position='bottom-right' hideProgressBar />\r\n         <ModalContainer />\r\n         <Route exact path='/' component={HomePage} />\r\n         <Route\r\n            path={'/(.+)'}\r\n            render={() => (\r\n               <>\r\n                  <NavBar />\r\n                  <Container style={{ marginTop: '7em' }}>\r\n                     <Switch>\r\n                        <PrivateRoute exact path='/activities' component={ActivityDashboard} />\r\n                        <PrivateRoute path='/activities/:id' component={ActivityDetails} />\r\n                        <PrivateRoute key={location.key} path={['/createActivity', '/manage/:id']} component={ActivityForm} />\r\n                        <PrivateRoute path='/profiles/:username' component={ProfilePage} />\r\n                        <PrivateRoute path='/errors' component={TestErrors} />\r\n                        <Route path='/server-error' component={ServerError} />\r\n                        <Route path='/account/registerSuccess' component={RegisterSuccess} />\r\n                        <Route path='/account/verifyEmail' component={ConfirmEmail} />\r\n                        <Route component={NotFound} />\r\n                     </Switch>\r\n                  </Container>\r\n               </>\r\n            )}\r\n         />\r\n      </>\r\n   );\r\n}\r\n\r\nexport default observer(App);\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n  const { pathname } = useLocation();\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [pathname]);\r\n\r\n  return null;\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'react-calendar/dist/Calendar.css';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport './app/layout/styles.css';\nimport App from './app/layout/App';\nimport reportWebVitals from './reportWebVitals';\nimport { store, StoreContext } from './app/stores/store';\nimport { Router } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\nimport ScrollToTop from './app/layout/ScrollToTop';\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n   <StoreContext.Provider value={store}>\n      <Router history={history}>\n         <ScrollToTop />\n         <App />\n      </Router>\n   </StoreContext.Provider>,\n   document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}