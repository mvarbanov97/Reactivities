{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","features/activities/dashboard/ActivityFilters.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/options/categoryOptions.ts","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetails.tsx","features/errors/TestError.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileEditForm.tsx","features/profiles/ProfileAbout.tsx","features/profiles/ProfileFollowings.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","modelStateErrors","key","flat","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","user","register","fbLogin","accessToken","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","listFollowings","predicate","listActivities","Activity","init","Object","assign","ActivityFormValues","undefined","title","category","description","date","city","venue","Profile","displayName","image","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivities","axiosParams","result","setActivity","setPagination","setLoadingInitial","console","log","loadActivity","getActivity","runInAction","userStore","isGoing","attendees","some","isHost","hostUsername","host","find","x","Date","state","createActivity","attendee","newActivity","updateActivity","updatedActivity","deleteActivity","updateAttendance","filter","cancelActivityToggle","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","ProfileStore","loadingProfile","uploading","followings","loadingFollowings","activeTab","userActivities","loadingActivities","setActiveTab","loadProfile","photo","photos","isMain","setImage","activityStore","p","setDisplayName","followingCount","loadFollowings","loadUserActivities","UserStore","fbAccessToken","fbLoading","creds","setToken","modalStore","closeModal","logout","window","localStorage","removeItem","getUser","name","getFacebookLoginStatus","FB","getLoginStatus","authResponse","facebookLogin","apiLogin","catch","scope","getItem","appLoaded","setAppLoaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","on","comment","createdAt","unshift","stopHubConnetion","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","to","exact","header","src","alt","style","marginRight","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","vertical","size","width","marginTop","Header","attached","color","active","has","onChange","Reveal","animated","Content","visible","fluid","hidden","e","preventDefault","handleFollow","Card","Description","str","length","substring","truncate","bio","extra","Icon","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","circular","bordered","Segment","Group","Label","textAlign","stype","marginBottom","basic","secondary","clearing","floated","groupedActivities","group","sub","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","MyTextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","placeholder","type","render","ValidationErrors","Message","err","i","validationSchema","Yup","required","isValid","dirty","isLoggedIn","Divider","LoadingComponent","Dimmer","MyTextArea","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","categoryOptions","MyDateInput","selected","useHistory","useParams","nullable","enableReinitialize","uuid","handleFormSubmit","autoComplete","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","colo","verticalAlign","relaxed","divided","Extra","TestErrors","widths","baseUrl","primary","NotFound","Inline","message","Modal","onClose","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","isCurrentUser","addPhotoMode","setAddPhotoMode","target","setTarget","Tab","Pane","itemsPerRow","currentTarget","handleSetMainPhoto","handleDeletePhoto","setEditMode","panes","menuItem","pane","menu","onTabChange","activeIndex","handleTabChange","objectFit","Meta","menuPosition","Statistic","PrivateRoute","Component","component","rest","location","useLocation","finally","hideProgressBar","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.64f7a12c.chunk.js","sourcesContent":["export interface Pagination {\r\n    currentPage: number;\r\n    itemsPerPage: number;\r\n    totalItems: number;\r\n    totalPages: number;\r\n}\r\n\r\nexport class PaginatedResult<T> {\r\n    data: T;\r\n    pagination: Pagination;\r\n\r\n    constructor(data: T, pagination: Pagination) {\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\nexport class PagingParams {\r\n    pageNumber;\r\n    pageSize;\r\n\r\n    constructor(pageNumber = 1, pageSize = 2) {\r\n        this.pageNumber = pageNumber;\r\n        this.pageSize = pageSize;\r\n    }\r\n}","import axios, { AxiosError, AxiosResponse } from \"axios\";\nimport { toast } from \"react-toastify\";\nimport { history } from \"../..\";\nimport { Activity, ActivityFormValues } from \"../models/activity\";\nimport { PaginatedResult } from \"../models/pagination\";\nimport { Photo, Profile, UserActivtiy } from \"../models/profile\";\nimport { User, UserFormValues } from \"../models/user\";\nimport { store } from \"../stores/store\";\n\nconst sleep = (delay: number) => {\n  return new Promise((resolve) => {\n    setTimeout(resolve, delay);\n  });\n};\n\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\n\naxios.interceptors.request.use(config => {\n  const token = store.commonStore.token;\n  if(token) config.headers.Authorization = `Bearer ${token}`;\n  return config;\n})\n\naxios.interceptors.response.use(async (response) => {\n    if (process.env.NODE_ENV === 'development') await sleep(1000);\n    const pagination = response.headers[\"pagination\"];\n    if(pagination) {\n      response.data = new PaginatedResult(response.data, JSON.parse(pagination));\n      return response as AxiosResponse<PaginatedResult<any>>;\n    }\n    return response;\n}, (error: AxiosError) => {\n  const {data, status, config} = error.response!;\n  switch(status) {\n    case 400:\n      if (typeof data === 'string') {\n        toast.error(data);\n      }\n      if (config.method === 'get' && data.errors.hasOwnProperty('id')) {\n        history.push('/not-found');\n      }\n      if (data.errors) {\n        const modelStateErrors = [];\n        for (const key in data.errors) {\n          if (data.errors[key]) {\n            modelStateErrors.push(data.errors[key]);\n          }\n        }\n        throw modelStateErrors.flat();\n      }\n      break;\n    case 401:\n      toast.error('unauthorised');\n      break;\n    case 404:\n      history.push('/not-found');\n      break;\n    case 500:\n      store.commonStore.setServerError(data);\n      history.push('/server-error');\n      break;\n  }\n\n  return Promise.reject(error);\n});\n\nconst responseBody = <T>(response: AxiosResponse<T>) => response.data;\n\nconst requests = {\n  get: <T>(url: string) => axios.get<T>(url).then(responseBody),\n  post: <T>(url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\n  put: <T>(url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\n  delete: <T>(url: string) => axios.delete<T>(url).then(responseBody),\n};\n\nconst Activities = {\n  list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>(\"/activities\", {params}).then(responseBody),\n  details: (id:string) => requests.get<Activity>(`/activities/${id}`),\n  create:  (activity: ActivityFormValues) => requests.post<void>('/activities', activity),\n  update: (activity: ActivityFormValues) => requests.put<void>(`/activities/${activity.id}`, activity),\n  delete: (id:string) => requests.delete<void>(`/activities/${id}`),\n  attend: (id:string) => requests.post<void>(`/activities/${id}/attend`, {}),\n};\n\nconst Account = {\n  current: () => requests.get<User>('/account'),\n  login: (user: UserFormValues) => requests.post<User>('/account/login', user),\n  register: (user: UserFormValues) => requests.post<User>('/account/register', user),\n  fbLogin: (accessToken: string) => requests.post<User>(`/account/fbLogin?accessToken=${accessToken}`, {}),\n}\n\nconst Profiles = {\n  get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\n  uploadPhoto: (file: Blob) => {\n    let formData = new FormData();\n    formData.append('File', file);\n    return axios.post<Photo>('photos', formData, {\n      headers: {'Content-type' : 'multipart/form-data'}\n    })\n  },\n  setMainPhoto: (id:string) => requests.post(`/photos/${id}/setMain`, {}),\n  deletePhoto: (id:string) => requests.delete(`/photos/${id}`),\n  updateProfile: (profile: Partial<Profile>) => requests.put(`/profiles`, profile),\n  updateFollowing: (username: string) => requests.post(`/follow/${username}`, {}),\n  listFollowings: (username: string, predicate: string) => requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\n  listActivities: (username: string, predicate: string) => requests.get<UserActivtiy[]>(`/profiles/${username}/activities?predicate=${predicate}`),\n}\n\nconst agent = {\n  Activities,\n  Account,\n  Profiles,\n};\n\nexport default agent;\n","import { Profile } from \"./profile\";\r\n\r\nexport interface Activity {\r\n    id: string;\r\n    title: string;\r\n    date: Date | null;\r\n    description: string;\r\n    category: string;\r\n    city: string;\r\n    venue: string;\r\n    hostUsername: string;\r\n    isCancelled: boolean;\r\n    isGoing: boolean;\r\n    isHost: boolean;\r\n    host?: Profile;\r\n    attendees: Profile[]\r\n}\r\n\r\nexport class Activity implements Activity {\r\n    constructor(init?: ActivityFormValues){\r\n        Object.assign(this, init);\r\n    }\r\n}\r\n\r\nexport class ActivityFormValues {\r\n    id?: string = undefined;\r\n    title: string = '';\r\n    category: string = '';\r\n    description: string = '';\r\n    date: Date | null = null;\r\n    city: string = '';\r\n    venue: string = '';\r\n\r\n    constructor(activity?: ActivityFormValues) {\r\n        if (activity)\r\n        {\r\n            this.id = activity?.id;\r\n            this.title = activity?.title;\r\n            this.category = activity.category;\r\n            this.description = activity.description;\r\n            this.date = activity.date;\r\n            this.city = activity.city;\r\n            this.venue = activity.venue;\r\n            this.city = activity.city;\r\n        }\r\n        \r\n    }\r\n}","import { User } from \"./user\";\r\n\r\nexport interface Profile {\r\n    username: string;\r\n    displayName: string;\r\n    image?: string;\r\n    followersCount: number;\r\n    followingCount: number;\r\n    following: boolean;\r\n    bio?: string;\r\n    photos?: Photo[];\r\n}\r\n\r\nexport interface UserActivtiy {\r\n    id: string;\r\n    title: string;\r\n    category: string;\r\n    date: Date;\r\n}\r\n\r\nexport class Profile implements Profile {\r\n    constructor(user: User) {\r\n        this.username = user.username;\r\n        this.displayName = user.displayName;\r\n        this.image = user.image;\r\n    }\r\n}\r\n\r\nexport interface Photo {\r\n    id: string;\r\n    url: string;\r\n    isMain: boolean;\r\n}","import { format } from 'date-fns';\r\nimport { makeAutoObservable, reaction, runInAction } from 'mobx';\r\nimport agent from '../api/agent';\r\nimport { Activity, ActivityFormValues } from '../models/activity';\r\nimport { Pagination, PagingParams } from '../models/pagination';\r\nimport { Profile } from '../models/profile';\r\nimport { store } from './store';\r\n\r\nexport default class ActivityStore {\r\n   activityRegistry = new Map<string, Activity>();\r\n   selectedActivity: Activity | undefined = undefined;\r\n   editMode = false;\r\n   loading = false;\r\n   loadingInitial = false;\r\n   pagination: Pagination | null = null;\r\n   pagingParams = new PagingParams();\r\n   predicate = new Map().set('all', true);\r\n\r\n   constructor() {\r\n      makeAutoObservable(this);\r\n\r\n      reaction(\r\n         () => this.predicate.keys(),\r\n         () => {\r\n            this.pagingParams = new PagingParams();\r\n            this.activityRegistry.clear();\r\n            this.loadActivities();\r\n         }\r\n      )\r\n   }\r\n\r\n   setPagingParams = (pagingParams: PagingParams) => {\r\n      this.pagingParams = pagingParams;\r\n   }\r\n\r\n   setPredicate = (predicate: string, value: string | Date) => {\r\n      const resetPredicate = () => {\r\n         this.predicate.forEach((value, key) => {\r\n            if (key !== 'startDate') this.predicate.delete(key);\r\n         })\r\n      }\r\n      switch (predicate) {\r\n         case 'all':\r\n            resetPredicate();\r\n            this.predicate.set('all', true);\r\n            break;\r\n         case 'isGoing':\r\n            resetPredicate();\r\n            this.predicate.set('isGoing', true);\r\n            break;\r\n         case 'isHost':\r\n            resetPredicate();\r\n            this.predicate.set('isHost', true);\r\n            break;\r\n         case 'startDate':\r\n            this.predicate.delete('startDate');\r\n            this.predicate.set('startDate', value);\r\n            break;\r\n      }\r\n   } \r\n\r\n   get axiosParams() {\r\n      const params = new URLSearchParams();\r\n      params.append('pageNumber', this.pagingParams.pageNumber.toString());\r\n      params.append('pageSize', this.pagingParams.pageSize.toString());\r\n      this.predicate.forEach((value, key) => {\r\n         if (key === 'startDate') {\r\n            params.append(key, (value as Date).toISOString());\r\n         } else {\r\n            params.append(key, value);\r\n         }\r\n      })\r\n      return params;\r\n   }\r\n\r\n   get activitiesByDate() {\r\n      return Array.from(this.activityRegistry.values()).sort((a, b) => a.date!.getTime() - b.date!.getTime());\r\n   }\r\n\r\n   get groupedActivities() {\r\n      return Object.entries(\r\n         this.activitiesByDate.reduce((activities, activity) => {\r\n            const date = format(activity.date!, 'dd MMM yyyy');\r\n            activities[date] = activities[date] ? [...activities[date], activity] : [activity];\r\n            return activities;\r\n         }, {} as {[key:string]: Activity[]})\r\n      )\r\n   }\r\n\r\n   loadActivities = async () => {\r\n      this.loadingInitial = true;\r\n      try {\r\n         const result = await agent.Activities.list(this.axiosParams);\r\n         result.data.forEach(activity => {\r\n            this.setActivity(activity);\r\n         });\r\n         this.setPagination(result.pagination);\r\n         this.setLoadingInitial(false);\r\n      } catch (error) {\r\n         console.log(error);\r\n         this.setLoadingInitial(false);\r\n      }\r\n   };\r\n\r\n   setPagination = (pagination: Pagination) => {\r\n      this.pagination = pagination;\r\n   }\r\n\r\n   loadActivity = async (id: string) => {\r\n      let activity = this.getActivity(id);\r\n      if (activity) {\r\n         this.selectedActivity = activity;\r\n         return activity;\r\n      } else {\r\n         this.loadingInitial = true;\r\n         try {\r\n            activity = await agent.Activities.details(id);\r\n            this.setActivity(activity);\r\n            runInAction(() => {\r\n               this.selectedActivity = activity;\r\n            });\r\n            this.setLoadingInitial(false);\r\n            return activity;\r\n         } catch (error) {\r\n            console.log(error);\r\n            this.setLoadingInitial(false);\r\n         }\r\n      }\r\n   };\r\n\r\n   private setActivity = (activity: Activity) => {\r\n      const user = store.userStore.user;\r\n      if(user) {\r\n         activity.isGoing = activity.attendees!.some(a => a.username === user.username);\r\n         activity.isHost = activity.hostUsername === user.username;\r\n         activity.host = activity.attendees?.find(x => x.username === activity.hostUsername);\r\n      }\r\n      activity.date = new Date(activity.date!)\r\n      this.activityRegistry.set(activity.id, activity);\r\n   };\r\n\r\n   private getActivity = (id: string) => {\r\n      return this.activityRegistry.get(id);\r\n   };\r\n\r\n   setLoadingInitial = (state: boolean) => {\r\n      this.loadingInitial = state;\r\n   };\r\n\r\n   createActivity = async (activity: ActivityFormValues) => {\r\n      const user = store.userStore.user;\r\n      const attendee = new Profile(user!);\r\n      try {\r\n         await agent.Activities.create(activity);\r\n         const newActivity = new Activity(activity);\r\n         newActivity.hostUsername = user!.username;\r\n         newActivity.attendees = [attendee];\r\n         this.setActivity(newActivity);\r\n         runInAction(() => {\r\n            this.selectedActivity = newActivity;\r\n         });\r\n      } catch (error) {\r\n         console.log(error);\r\n      }\r\n   };\r\n\r\n   updateActivity = async (activity: ActivityFormValues) => {\r\n      try {\r\n         await agent.Activities.update(activity);\r\n         runInAction(() => {\r\n            if(activity.id){\r\n               let updatedActivity = {...this.getActivity(activity.id), ...activity};\r\n               this.activityRegistry.set(activity.id, updatedActivity as Activity);\r\n               this.selectedActivity = updatedActivity as Activity;\r\n            }\r\n         });\r\n      } catch (error) {\r\n         console.log(error);\r\n      }\r\n   };\r\n\r\n   deleteActivity = async (id: string) => {\r\n      this.loading = true;\r\n\r\n      try {\r\n         await agent.Activities.delete(id);\r\n         runInAction(() => {\r\n            this.activityRegistry.delete(id);\r\n            this.loading = false;\r\n         });\r\n      } catch (error) {\r\n         console.log(error);\r\n         runInAction(() => {\r\n            this.loading = false;\r\n         });\r\n      }\r\n   };\r\n\r\n   updateAttendance = async () => {\r\n      const user = store.userStore.user;\r\n      this.loading = true;\r\n\r\n      try {\r\n         await agent.Activities.attend(this.selectedActivity!.id);\r\n         runInAction(() => {\r\n            if (this.selectedActivity?.isGoing) {\r\n               this.selectedActivity.attendees = this.selectedActivity.attendees?.filter(a => a.username !== user?.username);\r\n               this.selectedActivity.isGoing = false;\r\n            } else {\r\n               const attendee = new Profile(user!);\r\n               this.selectedActivity?.attendees?.push(attendee);\r\n               this.selectedActivity!.isGoing = true;\r\n            }\r\n\r\n            this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n         })\r\n      } catch (error) {\r\n         console.log(error);\r\n      } finally {\r\n         runInAction(() => this.loading = false);\r\n      }\r\n   }\r\n\r\n   cancelActivityToggle = async () => {\r\n      this.loading = true;\r\n      try {\r\n         await agent.Activities.attend(this.selectedActivity!.id);\r\n         runInAction(() => {\r\n            this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\r\n            this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!)\r\n         })\r\n      } catch(error) {\r\n         console.log(error);\r\n      } finally {\r\n         runInAction(() => this.loading = false);\r\n      }\r\n   }\r\n\r\n   clearSelectedActivity = () => {\r\n      this.selectedActivity = undefined;\r\n   }\r\n\r\n   updateAttendeeFollowing = (username:string) => {\r\n      this.activityRegistry.forEach(activity => {\r\n         activity.attendees.forEach(attendee => {\r\n            if (attendee.username === username) {\r\n               attendee.following ? attendee.followersCount-- : attendee.followersCount++;\r\n               attendee.following = !attendee.following;\r\n            }\r\n         })\r\n      })\r\n   }\r\n}\r\n","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\nimport agent from \"../api/agent\";\nimport { Photo, Profile, UserActivtiy } from \"../models/profile\";\nimport { store } from \"./store\";\n\nexport default class ProfileStore{\n    profile: Profile | null = null;\n    loadingProfile: boolean = false;\n    uploading: boolean = false;\n    loading: boolean = false;\n    followings: Profile[] = [];\n    loadingFollowings: boolean = false;\n    activeTab: number =  0;\n    userActivities: UserActivtiy[] = [];\n    loadingActivities = false;\n\n    constructor() {\n        makeAutoObservable(this);\n\n        reaction(\n            () => this.activeTab,\n            activeTab => {\n                if (this.activeTab === 3 || this.activeTab === 4) {\n                    const predicate = this.activeTab === 3 ? 'followers' : 'following';\n                    this.loadFollowings(predicate);\n                } else {\n                    this.followings = [];\n                }\n            }\n        )\n    }\n\n    setActiveTab = (activeTab: any) => {\n        this.activeTab = activeTab;\n    }\n\n    get isCurrentUser() {\n        if (store.userStore.user && this.profile) {\n            return store.userStore.user.username === this.profile.username;\n        }\n\n        return false;\n    }\n\n    loadProfile = async (username:string) => {\n        this.loadingProfile = true;\n\n        try {\n            const profile = await agent.Profiles.get(username);\n            runInAction(() => {\n                this.profile = profile;\n                this.loadingProfile = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loadingProfile = false);\n        }\n    }\n\n    uploadPhoto = async (file: Blob) => {\n        this.uploading = true;\n        try {\n            const response = await agent.Profiles.uploadPhoto(file);\n            const photo = response.data;\n            runInAction(() => {\n                if (this.profile) {\n                    this.profile.photos?.push(photo);\n                    if (photo.isMain && store.userStore.user) {\n                        store.userStore.setImage(photo.url);\n                        this.profile.image = photo.url;\n                    }\n                }\n                this.uploading = false;\n            })\n        } catch(error) {\n            console.log(error);\n            runInAction(() => this.uploading = false)\n        }\n    }\n\n    setMainPhoto = async (photo: Photo) => {\n        this.loading = true;\n        try {\n            await agent.Profiles.setMainPhoto(photo.id);\n            store.userStore.setImage(photo.url);\n            store.activityStore.loadActivities();\n            runInAction(() => {\n                if (this.profile && this.profile.photos) {\n                    this.profile.photos.find(p => p.isMain)!.isMain = false;\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\n                    this.profile.image = photo.url;\n                    this.loading = false;\n                }\n            })\n\n        } catch (error) {\n            runInAction(() => this.loading = false);\n            console.log(error);\n        }\n    }\n\n    deletePhoto = async (photo: Photo) => {\n        this.loading = true;\n        try {\n            await agent.Profiles.deletePhoto(photo.id);\n            runInAction(() => {\n                if(this.profile) {\n                    this.profile.photos = this.profile?.photos?.filter(x => x.id !== photo.id)};\n                    this.loading = false;\n                }\n            )\n        } catch (error) {\n            runInAction(() => this.loading = false);\n            console.log(error);\n        }\n    }\n\n    updateProfile = async (profile: Partial<Profile>) => {\n        this.loading = true;\n        try {\n            await agent.Profiles.updateProfile(profile);\n            runInAction(() => {\n                if (profile.displayName && profile.displayName !== store.userStore.user?.displayName) {\n                    store.userStore.setDisplayName(profile.displayName);\n                }\n                this.profile = {...this.profile, ...profile as Profile};\n                this.loading = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loading = false);\n        }\n    }\n\n    updateFollowing = async (username:string, following:boolean) => {\n        this.loading = true;\n        try {\n            await agent.Profiles.updateFollowing(username);\n            store.activityStore.updateAttendeeFollowing(username);\n            runInAction(() => {\n                if (this.profile && this.profile.username !== store.userStore.user?.username && this.profile.username === username) {\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\n                    this.profile.following = !this.profile.following;\n                }\n                if (this.profile && this.profile.username === store.userStore.user?.username) {\n                    following ? this.profile.followingCount++ : this.profile.followingCount--;\n                }\n                this.followings.forEach(profile => {\n                    if (profile.username === username) {\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\n                        profile.following = !profile.following;\n                    }\n                })\n\n                this.loading = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loading = false);\n        }\n    }\n\n    loadFollowings = async (predicate:string) => {\n        this.loadingFollowings = true;\n        try {\n            const followings = await agent.Profiles.listFollowings(this.profile!.username, predicate);\n            runInAction(() => {\n                this.followings = followings;\n                this.loadingFollowings = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loadingFollowings = false);\n        }\n    }\n\n    loadUserActivities = async (username:string, predicate?: string) => {\n        this.loadingActivities = true;\n        try {\n            const activities = await agent.Profiles.listActivities(username, predicate!);\n            runInAction(() => {\n                this.userActivities = activities;\n                this.loadingActivities = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loadingActivities = false)\n        }\n    }\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { history } from \"../..\";\r\nimport agent from \"../api/agent\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class UserStore {\r\n    user: User | null = null;\r\n    fbAccessToken: string | null = null;\r\n    fbLoading: boolean = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    get isLoggedIn() {\r\n        return !!this.user;\r\n    }\r\n\r\n    login = async(creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.login(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    logout = () => {\r\n        store.commonStore.setToken(null);\r\n        window.localStorage.removeItem('jwt');\r\n        this.user = null;\r\n        history.push('/');\r\n    }\r\n\r\n    getUser = async () => {\r\n        try {\r\n            const user = await agent.Account.current();\r\n            runInAction(() => this.user = user);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    register = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.register(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    setImage = (image:string) => {\r\n        if (this.user) this.user.image = image;\r\n    }\r\n\r\n    setDisplayName = (name: string) => {\r\n        if (this.user) this.user.displayName = name;\r\n    }\r\n\r\n    getFacebookLoginStatus = async () => {\r\n        window.FB.getLoginStatus(response => {\r\n            if (response.status === 'connected') {\r\n                this.fbAccessToken = response.authResponse.accessToken;\r\n            }\r\n        })\r\n    }\r\n\r\n    facebookLogin = () => {\r\n        this.fbLoading = true;\r\n        const apiLogin = (accessToken:string) => {\r\n            agent.Account.fbLogin(accessToken).then(user => {\r\n                store.commonStore.setToken(user.token);\r\n                runInAction(() => {\r\n                    this.user = user;\r\n                    this.fbLoading = false;\r\n                })\r\n                history.push('/activities');\r\n            }).catch(error => {\r\n                console.log(error);\r\n                runInAction(() => this.fbLoading = false);\r\n            })\r\n        }\r\n        if (this.fbAccessToken) {\r\n            apiLogin(this.fbAccessToken);\r\n        } else {\r\n            window.FB.login(response => {\r\n                apiLogin(response.authResponse.accessToken);\r\n            }, {scope: 'public_profile,email'})\r\n        }\r\n    }\r\n}","import { createContext, useContext } from 'react';\r\nimport ActivityStore from './activityStore';\r\nimport CommentStore from './commentStore';\r\nimport CommonStore from './commonStore';\r\nimport ModalStore from './modalStore';\r\nimport ProfileStore from './profileStore';\r\nimport UserStore from './userStore';\r\n\r\ninterface Store {\r\n   activityStore: ActivityStore;\r\n   commonStore: CommonStore;\r\n   userStore: UserStore;\r\n   modalStore: ModalStore;\r\n   profileStore: ProfileStore;\r\n   commentStore: CommentStore;\r\n}\r\n\r\nexport const store: Store = {\r\n   activityStore: new ActivityStore(),\r\n   commonStore: new CommonStore(),\r\n   userStore: new UserStore(),\r\n   modalStore: new ModalStore(),\r\n   profileStore: new ProfileStore(),\r\n   commentStore: new CommentStore(),\r\n};\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport function useStore() {\r\n   return useContext(StoreContext);\r\n}\r\n","import { makeAutoObservable, reaction } from \"mobx\";\r\nimport { ServerError } from \"../models/serverError\";\r\n\r\nexport default class CommonStore {\r\n    error: ServerError | null = null;\r\n    token: string | null = window.localStorage.getItem('jwt');\r\n    appLoaded = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.token,\r\n            token => {\r\n                if(token){\r\n                    window.localStorage.setItem('jwt', token);\r\n                } else {\r\n                    window.localStorage.removeItem('jwt');\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setServerError = (error: ServerError) => {\r\n        this.error = error;\r\n    }\r\n\r\n    setToken = (token: string | null) => {\r\n        this.token = token;\r\n    }\r\n\r\n    setAppLoaded = () => {\r\n        this.appLoaded = true;\r\n    }\r\n}","import { makeAutoObservable } from \"mobx\"\r\n\r\ninterface Modal {\r\n    open: boolean;\r\n    body: JSX.Element | null;\r\n}\r\n\r\nexport default class ModalStore {\r\n    modal: Modal = {\r\n        open: false,\r\n        body: null\r\n    }\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    openModal = (content: JSX.Element) => {\r\n        this.modal.open = true;\r\n        this.modal.body = content;\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { ChatComment } from \"../models/comment\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class CommentStore {\r\n    comments: ChatComment[] = [];\r\n    hubConnection: HubConnection | null = null;\r\n    \r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    createHubConnection = (activityId: string) => {\r\n        if (store.activityStore.selectedActivity) {\r\n            this.hubConnection = new HubConnectionBuilder().withUrl(process.env.REACT_APP_CHAT_URL + '?activityId=' + activityId, {\r\n                accessTokenFactory: () => store.userStore.user?.token!\r\n            })\r\n            .withAutomaticReconnect()\r\n            .configureLogging(LogLevel.Information)\r\n            .build();\r\n\r\n            this.hubConnection.start().catch(error => console.log(\"Error establishing the hub connection\"));\r\n\r\n            this.hubConnection.on('LoadComments', (comments:ChatComment[]) => {\r\n                runInAction(() => {\r\n                    comments.forEach(comment => {\r\n                        comment.createdAt = new Date(comment.createdAt + 'Z');\r\n                    });\r\n                    this.comments = comments\r\n                })\r\n            });\r\n\r\n            this.hubConnection.on('ReceiveComment', (comment:ChatComment) => {\r\n                runInAction(() => {\r\n                    comment.createdAt = new Date(comment.createdAt);\r\n                    this.comments.unshift(comment);\r\n                })\r\n            });\r\n        }\r\n    }\r\n\r\n    stopHubConnetion = () => {\r\n        this.hubConnection?.stop().catch(error => console.log('Error stopping the connection:', error));\r\n    }\r\n\r\n    clearComments = () => {\r\n        this.comments = [];\r\n        this.stopHubConnetion();\r\n    }\r\n\r\n    addComment = async (values:any) => {\r\n        values.activityId = store.activityStore.selectedActivity?.id;\r\n        try {\r\n            await this.hubConnection?.invoke('SendComment', values);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n\r\n    }\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link, NavLink } from \"react-router-dom\";\r\nimport { Button, Container, Dropdown, Image, Menu } from \"semantic-ui-react\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\nexport default observer(function NavBar() {\r\n    const { userStore: { user, logout } } = useStore();\r\n\r\n    return (\r\n        <Menu inverted fixed=\"top\">\r\n            <Container>\r\n                <Menu.Item as={NavLink} to='/' exact header>\r\n                    <img src=\"/assets/logo.png\" alt=\"logo\" style={{ marginRight: \"10px\" }} /> Reactivities\r\n                </Menu.Item>\r\n                <Menu.Item as={NavLink} to='/activities' name=\"Activities\" />\r\n                <Menu.Item as={NavLink} to='/errors' name=\"Errors\" />\r\n                <Menu.Item name=\"Activities\">\r\n                    <Button as={NavLink} to='/createActivity' positive content=\"Create Activity\" />\r\n                </Menu.Item>\r\n                <Menu.Item position='right'>\r\n                    <Image src={user?.image || '/assets/user.png'} avatar spaced='right' />\r\n                    <Dropdown pointing='top left' text={user?.displayName}>\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item as={Link} to={`/profiles/${user?.username}`} text='My Profile' icon='user' />\r\n                            <Dropdown.Item onClick={logout} text='Logout' icon='power' />\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </Menu.Item>\r\n            </Container>\r\n        </Menu>\r\n    );\r\n})\r\n","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport Calendar from 'react-calendar';\r\nimport { Header, Menu } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nexport default observer(function ActivityFilters() {\r\n   const {activityStore: {predicate, setPredicate}} = useStore();\r\n   return (\r\n      <>\r\n         <Menu vertical size='large' style={{ width: '100%', marginTop: 25 }}>\r\n            <Header icon='filters' attached color='teal' content='Filters' />\r\n            <Menu.Item \r\n               content='All Activities'\r\n               active={predicate.has('all')}\r\n               onClick={() => setPredicate('all', 'true')}\r\n            />\r\n            <Menu.Item\r\n               content=\"I'm going\"\r\n               active={predicate.has('isGoing')}\r\n               onClick={() => setPredicate('isGoing', 'true')}\r\n            />\r\n            <Menu.Item \r\n               content=\"I'm hosting\"\r\n               active={predicate.has('isHost')}\r\n               onClick={() => setPredicate('isHost', 'true')}\r\n            />\r\n         </Menu>\r\n         <Header />\r\n         <Calendar \r\n            onChange={(date: any) => setPredicate('startDate', date as Date)}\r\n            value={predicate.get('startDate') || new Date()}\r\n         />\r\n      </>\r\n   );\r\n})\r\n","import { observer } from 'mobx-react-lite';\r\nimport React, { SyntheticEvent } from 'react';\r\nimport { Reveal, Button } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function FollowButton({ profile }: Props) {\r\n    const {profileStore, userStore} = useStore();\r\n    const {updateFollowing, loading} = profileStore;\r\n\r\n    if (userStore.user?.username === profile.username) return null;\r\n\r\n    function handleFollow(e: SyntheticEvent, username: string) {\r\n        e.preventDefault();\r\n        profile.following ? updateFollowing(username, false) : updateFollowing(username, true);\r\n    }\r\n\r\n    return (\r\n        <Reveal animated='move'>\r\n            <Reveal.Content visible style={{ width: '100%' }}>\r\n                <Button \r\n                    fluid \r\n                    color='teal' \r\n                    content={profile.following ? \"Following\" : \"Not following\"}\r\n                />\r\n            </Reveal.Content>\r\n            <Reveal.Content hidden style={{ width: '100%' }}>\r\n                <Button \r\n                    fluid\r\n                    color={profile.following ? 'red' : 'green'} \r\n                    content={profile.following ? 'Unfollow' : 'Follow'}\r\n                    loading={loading}\r\n                    onClick={(e) => handleFollow(e, profile.username)}\r\n                />\r\n            </Reveal.Content>\r\n        </Reveal>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Card, Icon, Image } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport FollowButton from './FollowButton';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileCard({ profile }: Props) {\r\n    function truncate(str: string | undefined) {\r\n        if (str)\r\n        {\r\n            return str.length > 40 ? str.substring(0, 37) + '...' : str;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Card as={Link} to={`/profiles/${profile.username}`}>\r\n            <Image src={profile.image || '/assets/user.png'} />\r\n            <Card.Content>\r\n                <Card.Header>{profile.displayName}</Card.Header>\r\n                <Card.Description>{truncate(profile.bio)}</Card.Description>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <Icon name='user' />\r\n                {profile.followersCount}\r\n            </Card.Content>\r\n            <FollowButton profile={profile} />\r\n        </Card>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Image, List, Popup } from 'semantic-ui-react';\r\nimport { Profile } from '../../../app/models/profile';\r\nimport ProfileCard from '../../profiles/ProfileCard';\r\n\r\ninterface Props {\r\n    attendees: Profile[];\r\n}\r\n\r\nexport default observer(function ActivityListItemAttendee({ attendees }: Props) {\r\n    const styles = {\r\n        borderColor: 'orange',\r\n        borderWidth: 3\r\n    }\r\n\r\n    return (\r\n        <List horizontal>\r\n            {attendees.map(attendee => (\r\n                <Popup\r\n                    hoverable\r\n                    key={attendee.username}\r\n                    trigger={\r\n                        <List.Item key={attendee.username} as={Link} to={`/profiles/${attendee.username}`}>\r\n                            <Image \r\n                                size='mini' \r\n                                circular \r\n                                src={attendee.image || 'assets/user.png'}\r\n                                bordered\r\n                                style={attendee.following ? styles : null}\r\n                            />\r\n                        </List.Item>\r\n                    }\r\n                >\r\n                    <Popup.Content>\r\n                        <ProfileCard profile={attendee} />\r\n                    </Popup.Content>\r\n                </Popup>\r\n\r\n            ))}\r\n        </List>\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Icon, Item, Label, Segment } from 'semantic-ui-react';\r\nimport { Activity } from '../../../app/models/activity';\r\nimport ActivityListItemAttendee from './ActivityListItemAttendee';\r\n\r\ninterface Props {\r\n   activity: Activity;\r\n}\r\n\r\nexport default observer(function ActivityListItem({ activity }: Props) {\r\n\r\n   return (\r\n      <Segment.Group>\r\n         <Segment>\r\n            {activity.isCancelled &&\r\n               <Label attached='top' color='red' content='Cancelled' style={{ textAlign: 'center' }} />\r\n            }\r\n            <Item.Group>\r\n               <Item>\r\n                  <Item.Image stype={{ marginBottom: 3 }} size='tiny' circular src={activity.host?.image || '/assets/user.png'} />\r\n                  <Item.Content>\r\n                     <Item.Header as={Link} to={`/activities/${activity.id}`}>\r\n                        {activity.title}\r\n                     </Item.Header>\r\n                     <Item.Description>Hosted by <Link to={`/profiles/${activity.host?.username}`}>{activity.host?.displayName}</Link></Item.Description>\r\n                     {activity.isHost && (\r\n                        <Item.Description>\r\n                           <Label basic color='orange'>You are hosting this activity</Label>\r\n                        </Item.Description>\r\n                     )}\r\n                     {activity.isGoing && !activity.isHost && (\r\n                        <Item.Description>\r\n                           <Label basic color='green'>You are going to this activity</Label>\r\n                        </Item.Description>\r\n                     )}\r\n                  </Item.Content>\r\n               </Item>\r\n            </Item.Group>\r\n         </Segment>\r\n         <Segment>\r\n            <span>\r\n               <Icon name='clock' /> {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n               <Icon name='marker' /> {activity.venue}\r\n            </span>\r\n         </Segment>\r\n         <Segment secondary>\r\n            <ActivityListItemAttendee attendees={activity.attendees!} />\r\n         </Segment>\r\n         <Segment clearing>\r\n            <span>{activity.description}</span>\r\n            <Button as={Link} to={`/activities/${activity.id}`} color='teal' floated='right' content='View' />\r\n         </Segment>\r\n      </Segment.Group>\r\n   );\r\n});","import React, { Fragment } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Header } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityListItem from './ActivityListItem';\r\n\r\nexport default observer(function ActivityList() {\r\n   const { activityStore } = useStore();\r\n   const { groupedActivities } = activityStore;\r\n\r\n   return (\r\n      <>\r\n         {groupedActivities.map(([group, activities]) => (\r\n            <Fragment key={group}>\r\n               <Header sub color='teal'>\r\n                  {group}\r\n               </Header>\r\n               {activities.map(activity => (\r\n                  <ActivityListItem key={activity.id} activity={activity} />\r\n               ))}\r\n            </Fragment>\r\n         ))}\r\n      </>\r\n   );\r\n});\r\n","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nexport default function ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};\r\n","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Grid, Loader } from 'semantic-ui-react';\r\nimport { PagingParams } from '../../../app/models/pagination';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityFilters from './ActivityFilters';\r\nimport ActivityList from './ActivityList';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\nimport ActivityListItemPlaceholder from './ActivityListItemPlaceholder';\r\n\r\nexport default observer(function ActivityDashboard() {\r\n   const { activityStore } = useStore();\r\n   const { loadActivities, activityRegistry, setPagingParams, pagination } = activityStore;\r\n   const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n   function handleGetNext() {\r\n      setLoadingNext(true);\r\n      setPagingParams(new PagingParams(pagination!.currentPage + 1));\r\n      loadActivities().then(() => setLoadingNext(false));\r\n   }\r\n   useEffect(() => {\r\n      if (activityRegistry.size <= 1) loadActivities();\r\n   }, [activityRegistry.size, loadActivities]);\r\n\r\n   return (\r\n      <Grid>\r\n         <Grid.Column width='10'>\r\n            {activityStore.loadingInitial && !loadingNext ? (\r\n               <>\r\n                  <ActivityListItemPlaceholder />\r\n               </>\r\n            ) : (\r\n               <InfiniteScroll\r\n                  pageStart={0}\r\n                  loadMore={handleGetNext}\r\n                  hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\r\n                  initialLoad={false}\r\n               >\r\n                  <ActivityList />\r\n               </InfiniteScroll>\r\n            )}\r\n         </Grid.Column>\r\n         <Grid.Column width='6'>\r\n            <ActivityFilters />\r\n         </Grid.Column>\r\n         <Grid.Column width={10}>\r\n            <Loader active={loadingNext} />\r\n         </Grid.Column>\r\n      </Grid>\r\n   );\r\n});\r\n","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    label?: string;\r\n    type?: string;\r\n}\r\n\r\nexport default function MyTextInput(props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <input {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Button, Header, Label } from 'semantic-ui-react';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nexport default observer(function LoginForm() {\r\n    const {userStore} = useStore();\r\n\r\n    return (\r\n        <Formik \r\n            initialValues={{email: '', password: '', error: null}}\r\n            onSubmit={(values, {setErrors}) => userStore.login(values).catch(error => \r\n                setErrors({error: 'Invalid email or password'}))}\r\n        >\r\n            {({handleSubmit, isSubmitting, errors}) => (\r\n                <Form className='ui form' onSubmit={handleSubmit}>\r\n                    <Header as='h2' content='Login to Reactivities' color='teal' textAlign='center' />\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage\r\n                        name='error' \r\n                        render={() => \r\n                        <Label style={{marginBottom: 10}} basic color='red' content={errors.error} />} \r\n                    />\r\n                    <Button loading={isSubmitting} positive content='Login' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import React from 'react';\r\nimport { Message } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n   errors: any;\r\n}\r\n\r\nexport default function ValidationErrors({ errors }: Props) {\r\n   return (\r\n      <Message error>\r\n         {errors && (\r\n            <Message.List>\r\n               {errors.map((err: any, i: any) => (\r\n                  <Message.Item key={i}>{err}</Message.Item>\r\n               ))}\r\n            </Message.List>\r\n         )}\r\n      </Message>\r\n   );\r\n}\r\n","import { ErrorMessage, Form, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Button, Header } from 'semantic-ui-react';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport { useStore } from '../../app/stores/store';\r\nimport * as Yup from 'yup';\r\nimport ValidationErrors from '../errors/ValidationErrors';\r\n\r\nexport default observer(function RegisterForm() {\r\n    const {userStore} = useStore();\r\n\r\n    return (\r\n        <Formik \r\n            initialValues={{displayName: '', username: '' ,email: '', password: '', error: null}}\r\n            onSubmit={(values, {setErrors}) => userStore.register(values).catch(error => \r\n                setErrors({error}))}\r\n                validationSchema={Yup.object({\r\n                    displayName: Yup.string().required(),\r\n                    username: Yup.string().required(),\r\n                    email: Yup.string().required().email(),\r\n                    password: Yup.string().required().length(6),\r\n                })}\r\n        >\r\n            {({handleSubmit, isSubmitting, errors, isValid, dirty}) => (\r\n                <Form className='ui form error' onSubmit={handleSubmit}>\r\n                    <Header as='h2' content='Sign up to Reactivities' color='teal' textAlign='center' />\r\n                    <MyTextInput name='displayName' placeholder='Display Name' />\r\n                    <MyTextInput name='username' placeholder='Username' />\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='username' placeholder='Username' />\r\n                    <ErrorMessage\r\n                        name='error' \r\n                        render={() => \r\n                        <ValidationErrors errors={errors.error} />} \r\n                    />\r\n                    <Button disabled={!isValid || !dirty || isSubmitting} \r\n                        loading={isSubmitting} positive content='Login' type='submit' fluid \r\n                    />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Container, Header, Segment, Image, Button, Divider } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport LoginForm from '../users/LoginForm';\r\nimport RegisterForm from '../users/RegisterForm';\r\n\r\nexport default observer(function HomePage() {\r\n   const { userStore, modalStore } = useStore();\r\n\r\n   return (\r\n      <Segment inverted textAlign='center' vertical className='masthead'>\r\n         <Container text>\r\n            <Header as='h1' inverted>\r\n               <Image size='massive' src='/assets/logo.png' alt='logo' style={{ marginBottom: 12 }} />\r\n               Reactivities\r\n            </Header>\r\n            {userStore.isLoggedIn\r\n               ?\r\n               (\r\n                  <>\r\n                     <Header as='h2' inverted content='Welcome to Reactivities' />\r\n                     <Button as={Link} to='/activities' size='huge' inverted>\r\n                        Go to Activities!\r\n                     </Button>\r\n                  </>\r\n               )\r\n               :\r\n               (\r\n                  <>\r\n                     <Button onClick={() => modalStore.openModal(<LoginForm />)} size='huge' inverted>\r\n                        Login!\r\n                     </Button>\r\n                     <Button onClick={() => modalStore.openModal(<RegisterForm />)} size='huge' inverted>\r\n                        Register!\r\n                     </Button>\r\n                     <Divider horizontal inverted >Or</Divider>\r\n                     <Button \r\n                        loading={userStore.fbLoading}\r\n                        size='huge'\r\n                        inverted\r\n                        color='facebook'\r\n                        content='Login with Facebook'\r\n                        onClick={userStore.facebookLogin}\r\n                     />\r\n                  </>\r\n               )\r\n            }\r\n         </Container>\r\n      </Segment>\r\n   );\r\n})\r\n","import React from 'react';\r\nimport { Dimmer, Loader } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    inverted?: boolean;\r\n    content?: string;\r\n}\r\n\r\nexport default function LoadingComponent({inverted = true, content = 'Loading...'}: Props) {\r\n    return (\r\n        <Dimmer active={true} inverted={inverted}>\r\n            <Loader content={content} />\r\n        </Dimmer>\r\n    )\r\n}","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    rows: number;\r\n    label?: string;\r\n}\r\n\r\nexport default function MyTextArea(props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <textarea {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label, Select } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    options: any;\r\n    label?: string;\r\n}\r\n\r\nexport default function MySelectInput(props: Props) {\r\n    const [field, meta, helpers] = useField(props.name);\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <Select\r\n                clearable\r\n                options={props.options}\r\n                value={field.value || null}\r\n                onChange={(e, d) => helpers.setValue(d.value)}\r\n                onBlur={(() => helpers.setTouched(true))}\r\n                placeholder={props.placeholder}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","export const categoryOptions = [\r\n    {text: 'Drinks', value: 'drinks'},\r\n    {text: 'Culture', value: 'culture'},\r\n    {text: 'Film', value: 'film'},\r\n    {text: 'Food', value: 'food'},\r\n    {text: 'Music', value: 'music'},\r\n    {text: 'Travel', value: 'travel'},\r\n]","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\nimport DatePicker, {ReactDatePickerProps} from 'react-datepicker';\r\n\r\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>) {\r\n    const [field, meta, helpers] = useField(props.name!);\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <DatePicker\r\n                {...field}\r\n                {...props}\r\n                selected={(field.value && new Date(field.value)) || null}\r\n                onChange={value => helpers.setValue(value)}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\nimport React, { useState, useEffect } from \"react\";\nimport { Link, useHistory, useParams } from \"react-router-dom\";\nimport { Button, Header, Segment } from \"semantic-ui-react\";\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\nimport { useStore } from \"../../../app/stores/store\";\nimport { Form, Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport MyTextInput from \"../../../app/common/form/MyTextInput\";\nimport MyTextArea from \"../../../app/common/form/MyTextArea\";\nimport MySelectInput from \"../../../app/common/form/MySelectInput\";\nimport { categoryOptions } from \"../../../app/common/options/categoryOptions\";\nimport MyDateInput from \"../../../app/common/form/MyDateInput\";\nimport { ActivityFormValues } from \"../../../app/models/activity\";\nimport {v4 as uuid} from 'uuid';\n\nexport default observer(function ActivityForm() {\n    const history = useHistory();\n    const { activityStore } = useStore();\n    const {\n        createActivity,\n        updateActivity,\n        loadActivity,\n        loadingInitial,\n    } = activityStore;\n    const { id } = useParams<{ id: string }>();\n\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\n\n    const validationSchema = Yup.object({\n        title: Yup.string().required(\"The activity title is required\"),\n        description: Yup.string().required(\"The activity description is required\"),\n        category: Yup.string().required(),\n        date: Yup.string().required(\"Date is required\").nullable(),\n        venue: Yup.string().required(),\n        city: Yup.string().required(),\n    });\n\n    useEffect(() => {\n        if (id) loadActivity(id).then((activity) => setActivity(new ActivityFormValues(activity)));\n    }, [id, loadActivity]);\n\n    function handleFormSubmit(activity: ActivityFormValues) {\n        if (!activity.id)\n        {\n            let newActivity = {\n                ...activity,\n                id: uuid(),\n            };\n            createActivity(newActivity).then(() => history.push(`/activities/${newActivity.id}`));\n        } else\n        {\n            updateActivity(activity).then(() => history.push(`/activities/${activity.id}`));\n        }\n    }\n\n    if (loadingInitial) return <LoadingComponent content=\"Loading activity...\" />;\n\n    return (\n        <Segment clearing>\n            <Header content='Activity Details' sub color='teal' />\n            <Formik\n                validationSchema={validationSchema}\n                enableReinitialize\n                initialValues={activity}\n                onSubmit={(values) => handleFormSubmit(values)}>\n                {({ handleSubmit, isValid, isSubmitting, dirty }) => (\n                    <Form className=\"ui form\" onSubmit={handleSubmit} autoComplete=\"off\">\n                        <MyTextInput placeholder='Title' name='title' />\n                        <MyTextArea rows={3} placeholder=\"Description\" name=\"description\" />\n                        <MySelectInput options={categoryOptions} placeholder=\"Category\" name=\"category\" />\n                        <MyDateInput\n                            placeholderText=\"Date\"\n                            name=\"date\"\n                            showTimeSelect\n                            timeCaption='time'\n                            dateFormat='MMMM d, yyyy h:mm aa'\n                        />\n                        <Header content='Location Detils' sub color='teal' />\n                        <MyTextInput placeholder=\"City\" name=\"city\" />\n                        <MyTextInput placeholder=\"Venue\" name=\"venue\" />\n                        <Button \n                            disabled={isSubmitting || !dirty || !isValid}\n                            loading={isSubmitting}\n                            floated=\"right\" \n                            positive \n                            type=\"submit\" \n                            content=\"Submit\" \n                        />\n                        <Button as={Link} to=\"/activities\" floated=\"right\" type=\"button\" content=\"Cancel\" />\n                    </Form>\n                )}\n            </Formik>\n        </Segment>\n    );\n});\n","import { Formik, Form, Field, FieldProps } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React, { useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Segment, Header, Comment, Loader } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport * as Yup from 'yup';\r\nimport { formatDistanceToNow } from 'date-fns/esm';\r\n\r\ninterface Props {\r\n   activityId: string;\r\n}\r\n\r\nexport default observer(function ActivityDetailedChat({ activityId }: Props) {\r\n   const { commentStore } = useStore();\r\n\r\n   useEffect(() => {\r\n      if (activityId)\r\n      {\r\n         commentStore.createHubConnection(activityId);\r\n      }\r\n\r\n      return () => {\r\n         commentStore.clearComments();\r\n      }\r\n   }, [commentStore, activityId]);\r\n   return (\r\n      <>\r\n         <Segment textAlign='center' attached='top' inverted color='teal' style={{ border: 'none' }}>\r\n            <Header>Chat about this event</Header>\r\n         </Segment>\r\n         <Segment attached clearing>\r\n            <Formik\r\n               onSubmit={(values, { resetForm }) =>\r\n                  commentStore.addComment(values).then(() => resetForm())}\r\n               initialValues={{ body: '' }}\r\n               validationSchema={Yup.object({\r\n                  body: Yup.string().required()\r\n               })}\r\n            >\r\n               {({ isSubmitting, isValid, handleSubmit }) => (\r\n                  <Form className='ui form'>\r\n                     <Field name='body'>\r\n                        {(props: FieldProps) => (\r\n                           <div style={{ position: 'relative' }}>\r\n                              <Loader active={isSubmitting} />\r\n                              <textarea\r\n                                 placeholder='Enter your comment (Enter to submit, SHIFT + Enter for new line)'\r\n                                 rows={2}\r\n                                 {...props.field}\r\n                                 onKeyPress={e => {\r\n                                    if (e.key === 'Enter' && e.shiftKey)\r\n                                    {\r\n                                       return;\r\n                                    }\r\n                                    if (e.key === 'Enter' && !e.shiftKey)\r\n                                    {\r\n                                       e.preventDefault();\r\n                                       isValid && handleSubmit();\r\n                                    }\r\n                                 }}\r\n                              />\r\n                           </div>\r\n                        )}\r\n                     </Field>\r\n                  </Form>\r\n               )}\r\n            </Formik>\r\n            <Comment.Group>\r\n               {commentStore.comments.map(comment => (\r\n                  <Comment key={comment.id}>\r\n                     <Comment.Avatar src={comment.image || '/assets/user.png'} />\r\n                     <Comment.Content>\r\n                        <Comment.Author as={Link} to={`/profiles/${comment.username}`}>{comment.displayName}</Comment.Author>\r\n                        <Comment.Metadata>\r\n                           <div>{formatDistanceToNow(comment.createdAt)} ago</div>\r\n                        </Comment.Metadata>\r\n                        <Comment.Text style={{ whiteSpace: 'pre-wrap' }}>{comment.body}</Comment.Text>\r\n                     </Comment.Content>\r\n                  </Comment>\r\n               ))}\r\n            </Comment.Group>\r\n         </Segment>\r\n      </>\r\n   );\r\n});\r\n","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Header, Item, Segment, Image, Label } from 'semantic-ui-react'\r\nimport { Activity } from \"../../../app/models/activity\";\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedHeader({ activity }: Props) {\r\n    const { activityStore: { updateAttendance, loading, cancelActivityToggle } } = useStore();\r\n\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{ padding: '0' }}>\r\n                {activity.isCancelled && (\r\n                    <Label\r\n                        stype={{ position: 'absolute', zIndex: 1000, left: -14, top: 20 }}\r\n                        ribbon colo='red' content='Cancelled'\r\n                    />\r\n                )}\r\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle} />\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={activity.title}\r\n                                    style={{ color: 'white' }}\r\n                                />\r\n                                <p>{format(activity.date!, 'dd MMM yyyy')}</p>\r\n                                <p>\r\n                                    Hosted by <strong><Link to={`/profile/${activity.host?.username}`}>{activity.host?.displayName}</Link></strong>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {activity.isHost ? (\r\n                    <>\r\n                        <Button \r\n                            color={activity.isCancelled ? 'green' : 'red'}\r\n                            floated='left'\r\n                            basic\r\n                            content={activity.isCancelled ? 'Re-activate activity' : 'Cancel activity'}    \r\n                            onClick={cancelActivityToggle}\r\n                            loading={loading}\r\n                        />\r\n                        <Button\r\n                            disabled={activity.isCancelled}\r\n                            as={Link} \r\n                            to={`/manage/${activity.id}`} \r\n                            color='orange' floated='right'>\r\n                            Manage Event\r\n                        </Button>\r\n                    </>\r\n                ) : activity.isGoing ? (\r\n                    <Button \r\n                        loading={loading} \r\n                        onClick={updateAttendance}>\r\n                        Cancel attendance\r\n                    </Button>\r\n\r\n                ) : (\r\n                    <Button \r\n                        disabled={activity.isCancelled} \r\n                        loading={loading} \r\n                        onClick={updateAttendance} \r\n                        color='teal'>\r\n                        Join Activity\r\n                    </Button>\r\n                )}\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Segment, Grid, Icon } from 'semantic-ui-react';\r\nimport { Activity } from '../../../app/models/activity';\r\n\r\ninterface Props {\r\n   activity: Activity;\r\n}\r\n\r\nexport default observer(function ActivityDetailedInfo({ activity }: Props) {\r\n   return (\r\n      <Segment.Group>\r\n         <Segment attached='top'>\r\n            <Grid>\r\n               <Grid.Column width={1}>\r\n                  <Icon size='large' color='teal' name='info' />\r\n               </Grid.Column>\r\n               <Grid.Column width={15}>\r\n                  <p>{activity.description}</p>\r\n               </Grid.Column>\r\n            </Grid>\r\n         </Segment>\r\n         <Segment attached>\r\n            <Grid verticalAlign='middle'>\r\n               <Grid.Column width={1}>\r\n                  <Icon name='calendar' size='large' color='teal' />\r\n               </Grid.Column>\r\n               <Grid.Column width={15}>\r\n                  <span>{format(activity.date!, 'dd MMM yyyy h:mm aa')}</span>\r\n               </Grid.Column>\r\n            </Grid>\r\n         </Segment>\r\n         <Segment attached>\r\n            <Grid verticalAlign='middle'>\r\n               <Grid.Column width={1}>\r\n                  <Icon name='marker' size='large' color='teal' />\r\n               </Grid.Column>\r\n               <Grid.Column width={11}>\r\n                  <span>\r\n                     {activity.venue}, {activity.city}\r\n                  </span>\r\n               </Grid.Column>\r\n            </Grid>\r\n         </Segment>\r\n      </Segment.Group>\r\n   );\r\n});\r\n","import React from 'react';\r\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Activity } from '../../../app/models/activity';\r\n\r\ninterface Props {\r\n   activity: Activity;\r\n}\r\n\r\nexport default observer(function ActivityDetailedSidebar({ activity: { attendees, host } }: Props) {\r\n   if (!attendees) return null;\r\n\r\n   return (\r\n      <>\r\n         <Segment textAlign='center' style={{ border: 'none' }} attached='top' secondary inverted color='teal'>\r\n            {attendees.length} {attendees.length === 1 ? 'Person' : 'People'} going\r\n         </Segment>\r\n         <Segment attached>\r\n            <List relaxed divided>\r\n               {attendees.map(attendee => (\r\n                  <Item style={{ position: 'relative' }} key={attendee.username}>\r\n                     {attendee.username === host?.username && (\r\n                        <Label style={{ position: 'absolute' }} color='orange' ribbon='right'>\r\n                           Host\r\n                        </Label>\r\n                     )}\r\n                     <Image size='tiny' src={attendee.image || '/assets/user.png'} />\r\n                     <Item.Content verticalAlign='middle'>\r\n                        <Item.Header as='h3'>\r\n                           <Link to={`/profiles/${attendee.username}`}>{attendee.displayName}</Link>\r\n                        </Item.Header>\r\n                        {attendee.following && (\r\n                           <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>\r\n                        )}\r\n                     </Item.Content>\r\n                  </Item>\r\n               ))}\r\n            </List>\r\n         </Segment>\r\n      </>\r\n   );\r\n});\r\n","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityDetailedChat from './ActivityDetailedChat';\r\nimport ActivityDetailedHeader from './ActivityDetailedHeader';\r\nimport ActivityDetailedInfo from './ActivityDetailedInfo';\r\nimport ActivityDetailedSidebar from './ActivityDetailedSidebar';\r\n\r\nexport default observer(function ActivityDetails() {\r\n   const { activityStore } = useStore();\r\n   const { selectedActivity: activity, loadActivity, loadingInitial, clearSelectedActivity } = activityStore;\r\n   const { id } = useParams<{ id: string }>();\r\n\r\n   useEffect(() => {\r\n      console.log(id);\r\n      if (id) loadActivity(id);\r\n      return () => clearSelectedActivity();\r\n   }, [id, loadActivity, clearSelectedActivity]);\r\n\r\n   if (loadingInitial || !activity) return <LoadingComponent />\r\n\r\n   return (\r\n      <Grid>\r\n         <Grid.Column width={10}>\r\n            <ActivityDetailedHeader activity={activity} />\r\n            <ActivityDetailedInfo activity={activity} />\r\n            <ActivityDetailedChat activityId={activity.id} />\r\n         </Grid.Column>\r\n         <Grid.Column width={6} >\r\n            <ActivityDetailedSidebar activity={activity} />\r\n         </Grid.Column>\r\n      </Grid>\r\n   );\r\n})\r\n","import React from 'react';\r\nimport {Button, Header, Segment} from \"semantic-ui-react\";\r\nimport axios from 'axios';\r\nimport { useState } from 'react';\r\nimport ValidationErrors from './ValidationErrors';\r\n\r\nexport default function TestErrors() {\r\n    const baseUrl = process.env.REACT_APP_API_URL;\r\n    const [errors, setErrors] = useState(null);\r\n\r\n    function handleNotFound() {\r\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadRequest() {\r\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleServerError() {\r\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleUnauthorised() {\r\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadGuid() {\r\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleValidationError() {\r\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' content='Test Error component' />\r\n            <Segment>\r\n                <Button.Group widths='7'>\r\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\r\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\r\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\r\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\r\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\r\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\r\n                </Button.Group>\r\n            </Segment>\r\n            {errors &&\r\n                <ValidationErrors errors={errors} />\r\n            }\r\n        </>\r\n    )\r\n}","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react';\r\n\r\nexport default function NotFound() {\r\n    return (\r\n        <Segment placeholder>\r\n            <Header icon>\r\n                <Icon name='search' />\r\n                Oops - we've looked everywhere and could not find this\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={Link} to='/activities' primary>\r\n                    Return to activities page\r\n                </Button>\r\n            </Segment.Inline>\r\n        </Segment>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Container, Header, Segment } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nexport default observer(function ServerError() {\r\n    const {commonStore} = useStore();\r\n\r\n    return (\r\n        <Container>\r\n            <Header as='h1' content='Server Error' />\r\n            <Header sub as='h5' color='red' content={commonStore.error?.message} />\r\n            {commonStore.error?.details &&\r\n                <Segment>\r\n                    <Header as='h4' content='Stack trace' color='teal' />\r\n                    <code style={{marginTop: '10px'}}>{commonStore.error.details}</code>\r\n                </Segment>\r\n            }\r\n        </Container>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Modal } from 'semantic-ui-react';\r\nimport { useStore } from '../../stores/store';\r\n\r\nexport default observer(function ModalContainer() {\r\n    const { modalStore } = useStore();\r\n\r\n    return (\r\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\r\n            <Modal.Content>\r\n                {modalStore.modal.body}\r\n            </Modal.Content>\r\n        </Modal>\r\n    )\r\n})","import React from 'react';\r\nimport { Cropper } from 'react-cropper';\r\nimport 'cropperjs/dist/cropper.css';\r\n\r\ninterface Props {\r\n    imagePreview: string;\r\n    setCropper: (cropper: Cropper) => void;\r\n}\r\n\r\nexport default function PhotoWidgetCropper({ imagePreview, setCropper }: Props) {\r\n    return (\r\n        <Cropper\r\n            src={imagePreview}\r\n            style={{ height: 200, width: '100%' }}\r\n            initialAspectRatio={1}\r\n            aspectRatio={1}\r\n            preview='.img-preview'\r\n            guides={false}\r\n            viewMode={1}\r\n            autoCropArea={1}\r\n            background={false}\r\n            onInitialized={cropper => setCropper(cropper)}\r\n        />\r\n    )\r\n}","import React, { useCallback } from 'react'\r\nimport { useDropzone } from 'react-dropzone'\r\nimport { Header, Icon } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    setFiles: (files: any) => void;\r\n}\r\n\r\nexport default function PhotoWidgetDropzone({ setFiles }: Props) {\r\n    const dzStyles = {\r\n        border: 'dashed 3px #eee',\r\n        borderColor: '#eee',\r\n        borderRadius: '5px',\r\n        paddingTop: '30px',\r\n        textAlign: 'center' as 'center',\r\n        height: 200,\r\n    }\r\n\r\n    const dzActive = {\r\n        borderColor: 'green'\r\n    }\r\n\r\n    const onDrop = useCallback(acceptedFiles => {\r\n        setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\r\n            preview: URL.createObjectURL(file)\r\n        })))\r\n    }, [setFiles]);\r\n\r\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop })\r\n\r\n    return (\r\n        <div {...getRootProps()} style={isDragActive ? { ...dzStyles, ...dzActive } : dzStyles}>\r\n            <input {...getInputProps()} />\r\n            <Icon name='upload' size='huge' />\r\n            <Header content='Drop image here' /> \r\n        </div>\r\n    )\r\n}","import React, { useEffect } from 'react';\r\nimport { useState } from 'react';\r\nimport { Button, Grid, Header } from 'semantic-ui-react';\r\nimport PhotoWidgetCropper from './PhotoWidgetCropper';\r\nimport PhotoWidgetDropzone from './PhotoWidgetDropzone';\r\n\r\ninterface Props {\r\n    loading: boolean;\r\n    uploadPhoto: (file: Blob) => void;\r\n}\r\n\r\nexport default function PhotoUploadWidget({ loading, uploadPhoto }: Props) {\r\n    const [files, setFiles] = useState<any>([]);\r\n    const [cropper, setCropper] = useState<Cropper>();\r\n\r\n    function onCrop() {\r\n        if (cropper)\r\n        {\r\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview))\r\n        }\r\n    }, [files]);\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={4}>\r\n                <Header color='teal' content='Step 1 - Add Photo' />\r\n                <PhotoWidgetDropzone setFiles={setFiles} />\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header color='teal' content='Step 2 - Resize Image' />\r\n                {files && files.length > 0 && (\r\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header color='teal' content='Step 1 - Preview & Upload' />\r\n                {files && files.length > 0 &&\r\n                    <>\r\n                        <div className='img-preview' style={{ minHeight: 200, overflow: 'hidden' }} />\r\n                        <Button.Group widths={2}>\r\n                            <Button loading={loading} onClick={onCrop} positive icon='check' />\r\n                            <Button disabled={loading} onClick={() => setFiles([])} icon='close' />\r\n                        </Button.Group>\r\n                    </>\r\n                }\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React, { SyntheticEvent, useState } from 'react';\r\nimport { Card, Header, Tab, Image, Grid, Button } from 'semantic-ui-react';\r\nimport PhotoUploadWidget from '../../app/common/imageUpload/PhotoUploadWidget';\r\nimport { Photo, Profile } from '../../app/models/profile';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfilePhotos({ profile }: Props) {\r\n    const { profileStore: { isCurrentUser, uploadPhoto, uploading, loading, setMainPhoto, deletePhoto } } = useStore();\r\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n    const [target, setTarget] = useState('');\r\n\r\n    function handlePhotoUpload(file: Blob) {\r\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\r\n    }\r\n\r\n    function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        setMainPhoto(photo);\r\n    }\r\n\r\n    function handleDeletePhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        deletePhoto(photo);\r\n    }\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='image' content='Photos' />\r\n                    {isCurrentUser && (\r\n                        <Button\r\n                            floated='right' basic\r\n                            content={addPhotoMode ? 'Cancel' : 'Add Photo'}\r\n                            onClick={() => setAddPhotoMode(!addPhotoMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width={16} >\r\n                    {addPhotoMode ? (\r\n                        <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading} />\r\n                    ) : (\r\n                        <Card.Group itemsPerRow={5}>\r\n                            {profile.photos?.map(photo => (\r\n                                <Card key={photo.id}>\r\n                                    <Image src={photo.url} />\r\n                                    {isCurrentUser && (\r\n                                        <Button.Group fluid widths={2}>\r\n                                            <Button\r\n                                                basic\r\n                                                color='green'\r\n                                                content='Main'\r\n                                                name={'main' + photo.id}\r\n                                                disabled={photo.isMain}\r\n                                                loading={target === 'main' + photo.id && loading}\r\n                                                onClick={e => handleSetMainPhoto(photo, e)}\r\n                                            />\r\n                                            <Button\r\n                                                basic\r\n                                                color='red'\r\n                                                icon='trash'\r\n                                                loading={target === photo.id && loading}\r\n                                                onClick={e => handleDeletePhoto(photo, e)}\r\n                                                disabled={photo.isMain}\r\n                                                name={photo.id}\r\n                                            />\r\n                                        </Button.Group>\r\n                                    )}\r\n                                </Card>\r\n                            ))}\r\n                        </Card.Group>\r\n                    )}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import { Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Button } from \"semantic-ui-react\";\r\nimport MyTextArea from \"../../app/common/form/MyTextArea\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport * as Yup from 'yup';\r\n\r\ninterface Props {\r\n    setEditMode: (editMode: boolean) => void;\r\n}\r\n\r\nexport default observer(function ProfileEditForm({setEditMode}: Props) {\r\n    const {profileStore: {profile, updateProfile}} = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{displayName: profile?.displayName, bio: profile?.bio}}\r\n            onSubmit={values => {\r\n                updateProfile(values).then(() => {\r\n                    setEditMode(false);\r\n                })\r\n            }}\r\n            validationSchema={Yup.object({\r\n                displayName: Yup.string().required()\r\n            })}\r\n        >\r\n            {({isSubmitting, isValid, dirty}) => (\r\n                <Form className='ui form'>\r\n                    <MyTextInput placeholder='Display Name' name='displayName' />\r\n                    <MyTextArea rows={3} placeholder='Add your bio' name='bio' />\r\n                    <Button \r\n                        positive\r\n                        type='submit'\r\n                        loading={isSubmitting}\r\n                        content='Update profile'\r\n                        floated='right'\r\n                        disabled={!isValid || !dirty}\r\n                    />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import React, {useState} from 'react';\r\nimport {useStore} from \"../../app/stores/store\";\r\nimport {Button, Grid, Header, Tab} from \"semantic-ui-react\";\r\nimport ProfileEditForm from \"./ProfileEditForm\";\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nexport default observer(function ProfileAbout() {\r\n    const {profileStore} = useStore();\r\n    const {isCurrentUser, profile} = profileStore;\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width='16'>\r\n                    <Header floated='left' icon='user' content={`About ${profile?.displayName}`} />\r\n                    {isCurrentUser && (\r\n                        <Button\r\n                            floated='right'\r\n                            basic\r\n                            content={editMode ? 'Cancel' : 'Edit Profile'}\r\n                            onClick={() => setEditMode(!editMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width='16'>\r\n                    {editMode ? <ProfileEditForm setEditMode={setEditMode} /> : <span style={{whiteSpace: 'pre-wrap'}}>{profile?.bio}</span>}\r\n\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { useEffect } from 'react';\r\nimport { Card, Grid, Header, Tab } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileCard from './ProfileCard';\r\n\r\nexport default observer(function ProfileFollowings() {\r\n    const {profileStore} = useStore();\r\n    const {profile, followings, loadFollowings, loadingFollowings, activeTab} = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadFollowings('following');\r\n    }, [loadFollowings])\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingFollowings}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header \r\n                        floated='left' \r\n                        icon='user' \r\n                        content={activeTab === 3 ? `People following ${profile?.displayName}` : `People ${profile?.displayName} is following`} \r\n                    />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {followings.map(profile => (\r\n                            <ProfileCard key={profile.username} profile={profile} />\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React, { SyntheticEvent } from 'react';\r\nimport { useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Card, Grid, Header, Image, Tab, TabProps } from 'semantic-ui-react';\r\nimport { UserActivtiy } from '../../app/models/profile';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nexport default observer(function ProfileActivities() {\r\n    const panes = [\r\n        { menuItem: 'Future Events', pane: { key: 'future' } },\r\n        { menuItem: 'Past Events', pane: { key: 'past' } },\r\n        { menuItem: 'Hosting', pane: { key: 'hosting' } },\r\n    ];\r\n\r\n    const { profileStore } = useStore();\r\n    const {\r\n        loadUserActivities,\r\n        profile,\r\n        loadingActivities,\r\n        userActivities\r\n    } = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadUserActivities(profile!.username);\r\n    }, [loadUserActivities, profile]);\r\n\r\n    const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\r\n        loadUserActivities(profile!.username, panes[data.activeIndex as number].pane.key)\r\n    }\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingActivities}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='calendar' content={'Activities'} />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Tab\r\n                        panes={panes}\r\n                        menu={{ secondary: true, pointing: true }}\r\n                        onTabChange={(e, data) => handleTabChange(e, data)}\r\n                    />\r\n                    <br />\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {userActivities.map((activity: UserActivtiy) => (\r\n                            <Card\r\n                                as={Link}\r\n                                to={`/activities/${activity.id}`}\r\n                                key={activity.id}\r\n                            >\r\n                                <Image \r\n                                    src={`/assets/categoryImages/${activity.category}.jpg`} \r\n                                    style={{ minHeight: 100, objectFit: 'cover'}}\r\n                                />\r\n                                <Card.Content>\r\n                                    <Card.Header textAlign='center'>{activity.title}</Card.Header>\r\n                                    <Card.Meta textAlign='center'>\r\n                                        <div>{format(new Date(activity.date), 'do LLL')}</div>\r\n                                        <div>{format(new Date(activity.date), 'h:mm a')}</div>\r\n                                    </Card.Meta>\r\n                                </Card.Content>\r\n                            </Card>\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Tab } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport ProfilePhotos from './ProfilePhotos';\r\nimport ProfileAbout from './ProfileAbout'\r\nimport ProfileFollowings from './ProfileFollowings';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileActivities from './ProfileActivities';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileContent({profile}: Props) {\r\n    const {profileStore} = useStore();\r\n\r\n    const panes = [\r\n        { menuItem: 'About', render: () => <ProfileAbout /> },\r\n        { menuItem: 'Photos', render: () => <ProfilePhotos profile={profile} /> },\r\n        { menuItem: 'Events', render: () => <ProfileActivities /> },\r\n        { menuItem: 'Followers', render: () => <ProfileFollowings /> },\r\n        { menuItem: 'Following', render: () => <ProfileFollowings /> },\r\n    ];\r\n\r\n    return (\r\n        <Tab\r\n            menu={{ fluid: true, vertical: true }}\r\n            menuPosition='right'\r\n            panes={panes}\r\n            onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex)}\r\n        />\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Divider, Grid, Header, Image , Item, Segment, Statistic } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport FollowButton from './FollowButton';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileHeader({profile}: Props) {\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Image avatar size='small' src={profile.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Header as='h1'content={profile.displayName} />\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    <Statistic.Group widths={2}>\r\n                        <Statistic label='Followers' value={profile.followersCount} />\r\n                        <Statistic label='Following' value={profile.followingCount} />\r\n                    </Statistic.Group>\r\n                    <Divider />\r\n                    <FollowButton profile={profile} />\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Segment } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileContent from './ProfileContent';\r\nimport ProfileHeader from './ProfileHeader';\r\n\r\nexport default observer(function ProfilePage() {\r\n    const { username } = useParams<{ username: string }>();\r\n    const { profileStore } = useStore();\r\n    const { loadingProfile, loadProfile, profile, setActiveTab } = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadProfile(username);\r\n        return () => {\r\n            setActiveTab(0);\r\n        }\r\n    }, [loadProfile, username, setActiveTab]);\r\n\r\n    if (loadingProfile) return <LoadingComponent content='Loading profile...' />\r\n    return (\r\n        <Segment width={16}>\r\n            {profile &&\r\n                <>\r\n                    <ProfileHeader profile={profile} />\r\n                    <ProfileContent profile={profile} />\r\n                </>}\r\n        </Segment>\r\n    )\r\n})","import { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router-dom\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\ninterface Props extends RouteProps {\r\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\r\n}\r\n\r\nexport default function PrivateRoute({ component: Component, ...rest }: Props) {\r\n    const { userStore: { isLoggedIn } } = useStore();\r\n\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/' />}\r\n        />\r\n    )\r\n}","import { Container } from 'semantic-ui-react';\nimport NavBar from './NavBar';\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\nimport { observer } from 'mobx-react-lite';\nimport { Route, Switch, useLocation } from 'react-router-dom';\nimport HomePage from '../../features/home/HomePage';\nimport ActivityForm from '../../features/activities/form/ActivityForm';\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\nimport TestErrors from '../../features/errors/TestError';\nimport { ToastContainer } from 'react-toastify';\nimport NotFound from '../../features/errors/NotFound';\nimport ServerError from '../../features/errors/ServerError';\nimport { useStore } from '../stores/store';\nimport { useEffect } from 'react';\nimport LoadingComponent from './LoadingComponent';\nimport ModalContainer from '../common/modals/ModalContainer';\nimport ProfilePage from '../../features/profiles/ProfilePage';\nimport PrivateRoute from './PrivateRoute';\n\nfunction App() {\n   const location = useLocation();\n   const { commonStore, userStore } = useStore();\n\n   useEffect(() => {\n      if (commonStore.token)\n      {\n         userStore.getUser().finally(() => commonStore.setAppLoaded());\n      } else {\n         userStore.getFacebookLoginStatus().then(() => commonStore.setAppLoaded());\n      }\n   }, [commonStore, userStore])\n\n   if (!commonStore.appLoaded) return <LoadingComponent content='Loading app...' />\n\n   return (\n      <>\n         <ToastContainer position='bottom-right' hideProgressBar />\n         <ModalContainer />\n         <Route exact path='/' component={HomePage} />\n         <Route\n            path={'/(.+)'}\n            render={() => (\n               <>\n                  <NavBar />\n                  <Container style={{ marginTop: '7em' }}>\n                     <Switch>\n                        <PrivateRoute exact path='/activities' component={ActivityDashboard} />\n                        <PrivateRoute path='/activities/:id' component={ActivityDetails} />\n                        <PrivateRoute key={location.key} path={['/createActivity', '/manage/:id']} component={ActivityForm} />\n                        <PrivateRoute path='/profiles/:username' component={ProfilePage} />\n                        <PrivateRoute path='/errors' component={TestErrors} />\n                        <Route path='/server-error' component={ServerError} />\n                        <Route component={NotFound} />\n                     </Switch>\n                  </Container>\n               </>\n            )}\n         />\n      </>\n   );\n}\n\nexport default observer(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n  const { pathname } = useLocation();\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [pathname]);\r\n\r\n  return null;\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'react-calendar/dist/Calendar.css';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport './app/layout/styles.css';\nimport App from './app/layout/App';\nimport reportWebVitals from './reportWebVitals';\nimport { store, StoreContext } from './app/stores/store';\nimport { Router } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\nimport ScrollToTop from './app/layout/ScrollToTop';\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n   <StoreContext.Provider value={store}>\n      <Router history={history}>\n         <ScrollToTop />\n         <App />\n      </Router>\n   </StoreContext.Provider>,\n   document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}